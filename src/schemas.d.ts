/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Schema defining the metadata for appeal documents
 */
export interface AppealDocument {
  /**
   * The unique identifier for the document
   */
  documentId: string;
  /**
   * Internal case identifier
   */
  caseId: number | null;
  /**
   * External case identifier
   */
  caseReference: string;
  /**
   * A document can have multiple versions, and this indicates the latest version
   */
  version: number;
  /**
   * Current stored name of the document
   */
  filename: string;
  /**
   * Original name of document
   */
  originalFilename: string;
  /**
   * The file size, in bytes
   */
  size: number;
  /**
   * The mime type for the current version of the file
   */
  mime: string;
  /**
   * The internal location of the document
   */
  documentURI: string;
  /**
   * The location of the published document, will be null if the datePublished is not set
   */
  publishedDocumentURI: string | null;
  /**
   * Indicates the virus check status for the current document
   */
  virusCheckStatus: 'not_scanned' | 'scanned' | 'affected' | null;
  /**
   * A MD5 hash to check the validity of the file
   */
  fileMD5: string | null;
  /**
   * The creation date for the document
   */
  dateCreated: string;
  /**
   * The date the document was received
   */
  dateReceived: string | null;
  /**
   * The date the document was published
   */
  datePublished: string | null;
  /**
   * The last update date for the document
   */
  lastModified: string | null;
  /**
   * The internal code for an appeal type, e.g. Householder (D)
   */
  caseType: 'C' | 'D' | 'F' | 'G' | 'H' | 'L' | 'Q' | 'S' | 'V' | 'W' | 'X' | 'Y' | 'Z' | null;
  /**
   * Indicates the redaction status for the document
   */
  redactedStatus: 'not_redacted' | 'redacted' | 'no_redaction_required' | null;
  /**
   * The type of document, used for exchange, migrations and consumption from the appeal back-office system
   */
  documentType:
    | 'appellantCaseCorrespondence'
    | 'appellantCaseWithdrawalLetter'
    | 'appellantCostsApplication'
    | 'appellantCostsCorrespondence'
    | 'appellantCostsWithdrawal'
    | 'appellantStatement'
    | 'applicationDecisionLetter'
    | 'changedDescription'
    | 'originalApplicationForm'
    | 'whoNotified'
    | 'whoNotifiedSiteNotice'
    | 'whoNotifiedLetterToNeighbours'
    | 'whoNotifiedPressAdvert'
    | 'conservationMap'
    | 'lpaCaseCorrespondence'
    | 'lpaCostsApplication'
    | 'lpaCostsCorrespondence'
    | 'lpaCostsWithdrawal'
    | 'otherPartyRepresentations'
    | 'planningOfficerReport'
    | 'costsDecisionLetter'
    | 'caseDecisionLetter'
    | 'crossTeamCorrespondence'
    | 'inspectorCorrespondence'
    | 'uncategorised'
    | 'designAccessStatement'
    | 'plansDrawings'
    | 'newPlansDrawings'
    | 'planningObligation'
    | 'ownershipCertificate'
    | 'otherNewDocuments'
    | 'statementCommonGround'
    | 'communityInfrastructureLevy'
    | 'supplementaryPlanning'
    | 'otherRelevantPolicies'
    | 'emergingPlan'
    | 'developmentPlanPolicies'
    | 'consultationResponses'
    | 'eiaEnvironmentalStatement'
    | 'eiaScreeningDirection'
    | 'eiaScreeningOpinion'
    | 'definitiveMapStatement'
    | 'treePreservationPlan'
    | 'interestedPartyComment'
    | 'lpaStatement'
    | 'rule6Statement'
    | 'appellantFinalComment'
    | 'lpaFinalComment'
    | 'appellantProofOfEvidence'
    | 'appellantWitnessesEvidence'
    | 'lpaProofOfEvidence'
    | 'lpaWitnessesEvidence'
    | 'rule6ProofOfEvidence'
    | 'rule6WitnessesEvidence'
    | 'environmentalAssessment'
    | 'appealNotification'
    | null;
  /**
   * The system mastering the metadata for the current document
   */
  sourceSystem: 'back-office-appeals' | 'horizon' | 'acp' | 'sharepoint' | null;
  /**
   * Indicates where the documents originates from
   */
  origin: 'pins' | 'citizen' | 'lpa' | 'ogd' | null;
  /**
   * Owner of the current document
   */
  owner: string | null;
  /**
   * Name of person who authored document
   */
  author: string | null;
  /**
   * A custom description for the document
   */
  description: string | null;
  /**
   * The stage in the appeal process that has created the document
   */
  caseStage:
    | 'appellant-case'
    | 'lpa-questionnaire'
    | 'statements'
    | 'third-party-comments'
    | 'evidence'
    | 'witnesses'
    | 'final-comments'
    | 'appeal-decision'
    | 'costs'
    | 'internal'
    | null;
  /**
   * The folder ID containing the document in Horizon
   */
  horizonFolderId: string | null;
  [k: string]: unknown;
}

/**
 * Schema defining the metadata for appeal events, such as site visits, inquiries, hearings
 */
export interface AppealEvent {
  /**
   * The unique identifier for the event
   */
  eventId: string;
  /**
   * External case identifier
   */
  caseReference: string;
  /**
   * The type of event
   */
  eventType:
    | 'site_visit_access_required'
    | 'site_visit_accompanied'
    | 'site_visit_unaccompanied'
    | 'hearing'
    | 'hearing_virtual'
    | 'inquiry'
    | 'inquiry_virtual'
    | 'in_house'
    | 'pre_inquiry'
    | 'pre_inquiry_virtual';
  /**
   * An optional description / name for the event
   */
  eventName: string | null;
  /**
   * Status of the event
   */
  eventStatus:
    | 'withdrawn'
    | 'in_abeyance'
    | 'change_of_procedure'
    | 'new_rescheduled'
    | 'confirmed'
    | 'link_to_enforcement'
    | 'offered'
    | 'postponed';
  /**
   * Indicates if the event is urgent
   */
  isUrgent: boolean;
  /**
   * Indicates if the event has been published
   */
  eventPublished: boolean | null;
  /**
   * Event start date and time
   */
  eventStartDateTime: string;
  /**
   * Event end date and time
   */
  eventEndDateTime: string | null;
  /**
   * The date third-parties were informed of the site visit event
   */
  notificationOfSiteVisit: string | null;
  /**
   * First line of address for the event site
   */
  addressLine1: string;
  /**
   * Second line of address for the event site
   */
  addressLine2: string | null;
  /**
   * Town / City of the event address
   */
  addressTown: string;
  /**
   * County of the event address
   */
  addressCounty: string | null;
  /**
   * Postal code of the event address
   */
  addressPostcode: string;
  [k: string]: unknown;
}

/**
 * Schema defining the metadata for an appeal
 */
export interface AppealHASCase {
  /**
   * Internal case identifier
   */
  caseId: number | null;
  /**
   * External case identifier
   */
  caseReference: string;
  /**
   * Case submission id - link to draft submission created by appellant
   */
  submissionId?: string | null;
  /**
   * The processing status for the appeal
   */
  caseStatus:
    | 'assign_case_officer'
    | 'validation'
    | 'ready_to_start'
    | 'lpa_questionnaire'
    | 'issue_determination'
    | 'complete'
    | 'invalid'
    | 'closed'
    | 'withdrawn'
    | 'awaiting_transfer'
    | 'transferred'
    | 'event'
    | 'awaiting_event';
  /**
   * The internal code for an appeal type, e.g. D (Householder)
   */
  caseType: 'C' | 'D' | 'F' | 'G' | 'H' | 'L' | 'Q' | 'S' | 'V' | 'W' | 'X' | 'Y' | 'Z';
  /**
   * The type of procedure for the appeal
   */
  caseProcedure: 'written' | 'hearing' | 'inquiry';
  /**
   * A unique identifier for the Local Planning Authority
   */
  lpaCode: string;
  /**
   * Unique identifier for the case officer assigned to the case
   */
  caseOfficerId: string | null;
  /**
   * Unique identifier for the inspector assigned to the case
   */
  inspectorId: string | null;
  /**
   * A level used for allocation purposes
   */
  allocationLevel: 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | null;
  /**
   * A band used for allocation purposes
   */
  allocationBand: 1 | 2 | 3 | null;
  /**
   * A list of specialisms for allocation purposes
   */
  caseSpecialisms: string[] | null;
  /**
   * The date the appeal was submitted by the appellant
   */
  caseSubmittedDate: string;
  /**
   * The date the appeal was received
   */
  caseCreatedDate: string;
  /**
   * The date the appeal was last updated in the back-office
   */
  caseUpdatedDate: string;
  /**
   * The date since when the appeal was considered valid
   */
  caseValidDate: string | null;
  /**
   * The date the appeal was validated in the back-office
   */
  caseValidationDate: string | null;
  /**
   * The outcome of the validation action
   */
  caseValidationOutcome: 'valid' | 'invalid' | 'incomplete' | null;
  /**
   * A list of reasons why the appeal is invalid
   */
  caseValidationInvalidDetails: string[] | null;
  /**
   * A list of reasons why the appeal is incomplete
   */
  caseValidationIncompleteDetails: string[] | null;
  /**
   * When the validation outcome is incomplete, an extension may be granted to provide missing information
   */
  caseExtensionDate: string | null;
  /**
   * A date indicating when the case was started, resulting in the creation of a timetable
   */
  caseStartedDate: string | null;
  /**
   * A date indicating when the case was published
   */
  casePublishedDate: string | null;
  /**
   * Indicates if the case is linked, and the type of relationship
   */
  linkedCaseStatus: 'lead' | 'child' | null;
  /**
   * The reference of the lead case, if the case is a child case
   */
  leadCaseReference: string | null;
  /**
   * If the case is started and has a timetable, a deadline for the LPA to provide a response
   */
  lpaQuestionnaireDueDate: string | null;
  /**
   * The date the LPA provided a response to the case
   */
  lpaQuestionnaireSubmittedDate: string | null;
  /**
   * The date the LPA response was receeived
   */
  lpaQuestionnaireCreatedDate: string | null;
  /**
   * The date indicating when the questionnaire review was completed and the questionnaire published
   */
  lpaQuestionnairePublishedDate: string | null;
  /**
   * The outcome of the validation action
   */
  lpaQuestionnaireValidationOutcome: 'complete' | 'incomplete' | null;
  /**
   * The date the LPA response was validated
   */
  lpaQuestionnaireValidationOutcomeDate: string | null;
  /**
   * A list of reasons why the questionnaire is incomplete
   */
  lpaQuestionnaireValidationDetails: string[] | null;
  /**
   * A statement provided by the LPA
   */
  lpaStatement: string | null;
  /**
   * The date the appeal was withdrawn by the appellant
   */
  caseWithdrawnDate: string | null;
  /**
   * The date the appeal was transferred to a new case of a different type
   */
  caseTransferredDate: string | null;
  /**
   * The date the appeal was closed and the appellant requested to resubmit
   */
  transferredCaseClosedDate: string | null;
  /**
   * The date of the appeal decision
   */
  caseDecisionOutcomeDate: string | null;
  /**
   * The date the appeal decision was published
   */
  caseDecisionPublishedDate: string | null;
  /**
   * The final outcome for the decision
   */
  caseDecisionOutcome: 'allowed' | 'split_decision' | 'dismissed' | 'invalid' | null;
  /**
   * The date the appeal decision letter
   */
  caseCompletedDate: string | null;
  /**
   * Indicates if an enforcement notice is the reason for the appeal
   */
  enforcementNotice: boolean | null;
  /**
   * The unique identifier of the LPA application
   */
  applicationReference: string;
  /**
   * The date of the original LPA application
   */
  applicationDate: string;
  /**
   * The outcome of the original LPA decision
   */
  applicationDecision: 'granted' | 'refused' | 'not_received';
  /**
   * The date of the original LPA decision
   */
  applicationDecisionDate: string | null;
  /**
   * The statutory deadline for submitting an appeal from the original LPA decision date
   */
  caseSubmissionDueDate: string | null;
  /**
   * First line of address for the appeal site
   */
  siteAddressLine1: string;
  /**
   * Second line of address for the appeal site
   */
  siteAddressLine2: string | null;
  /**
   * Town / City of the site address
   */
  siteAddressTown: string;
  /**
   * County of the site address
   */
  siteAddressCounty: string | null;
  /**
   * Postal code of the site address
   */
  siteAddressPostcode: string;
  /**
   * Provided information on site accessibility
   */
  siteAccessDetails: string[] | null;
  /**
   * Provided information on site health and safety
   */
  siteSafetyDetails: string[] | null;
  /**
   * The site area, in square meters
   */
  siteAreaSquareMetres: number | null;
  /**
   * The floor space, in square meters
   */
  floorSpaceSquareMetres: number | null;
  /**
   * Indicates if the LPA considers the appeal type appropriate
   */
  isCorrectAppealType: boolean | null;
  /**
   * Indicates if the site is in a green belt
   */
  isGreenBelt: boolean | null;
  /**
   * Indicates if the site is in a conservation area
   */
  inConservationArea: boolean | null;
  /**
   * Indicates if the appellant has complete ownership of the site
   */
  ownsAllLand: boolean | null;
  /**
   * Indicates if the appellant has partial ownership of the site
   */
  ownsSomeLand: boolean | null;
  /**
   * Indicates if the appellant knows other owners of the site
   */
  knowsOtherOwners: 'Yes' | 'No' | 'Some' | null;
  /**
   * Indicates if the appellant knows all owners of the site
   */
  knowsAllOwners: 'Yes' | 'No' | 'Some' | null;
  /**
   * Indicates if the appellant has advertised the appeal to the LPA decision
   */
  advertisedAppeal: boolean | null;
  /**
   * The methods used to notify relevant parties
   */
  notificationMethod: ('notice' | 'letter' | 'advert' | null)[] | null;
  /**
   * Indicates if the appellant has informed other owners of the site
   */
  ownersInformed: boolean | null;
  /**
   * The original description of the development, as provided by the appellant
   */
  originalDevelopmentDescription: string | null;
  /**
   * Indicates that the LPA has changed the development description
   */
  changedDevelopmentDescription: boolean | null;
  /**
   * New conditions details provided by the LPA
   */
  newConditionDetails: string | null;
  /**
   * A list of related case references known to the appellant and the LPA
   */
  nearbyCaseReferences: string[] | null;
  /**
   * A list of neighbouring site addresses
   */
  neighbouringSiteAddresses:
    | {
        /**
         * First line of address of the site
         */
        neighbouringSiteAddressLine1: string;
        /**
         * Second line of address of the site
         */
        neighbouringSiteAddressLine2: string | null;
        /**
         * Town / City of the site address
         */
        neighbouringSiteAddressTown: string;
        /**
         * County of the site address
         */
        neighbouringSiteAddressCounty: string | null;
        /**
         * Postal code of the site address
         */
        neighbouringSiteAddressPostcode: string;
        /**
         * Provided information on site accessibility on this address
         */
        neighbouringSiteAccessDetails: string | null;
        /**
         * Provided information on site health and safety on this address
         */
        neighbouringSiteSafetyDetails: string | null;
        [k: string]: unknown;
      }[]
    | null;
  /**
   * A general reason given for the need to visit any neighbours
   */
  reasonForNeighbourVisits?: string | null;
  /**
   * A list of affected listed building IDs from Historic England
   */
  affectedListedBuildingNumbers: string[] | null;
  /**
   * Indicates if the appellant has applied for costs
   */
  appellantCostsAppliedFor: boolean | null;
  /**
   * Indicates if the appellant has applied for costs
   */
  lpaCostsAppliedFor: boolean | null;
  typeOfPlanningApplication?:
    | 'full-appeal'
    | 'householder-planning'
    | 'outline-planning'
    | 'prior-approval'
    | 'reserved-matters'
    | 'removal-or-variation-of-conditions'
    | null;
  [k: string]: unknown;
}

/**
 * Schema defining the metadata for appeal representations, such as statements, third-party comments and final comments
 */
export interface AppealRepresentation {
  /**
   * The unique identifier for the representation
   */
  representationId: string;
  /**
   * Internal case identifier
   */
  caseId: number | null;
  /**
   * External case identifier
   */
  caseReference: string;
  /**
   * Status of the representation
   */
  representationStatus:
    | 'awaiting_review'
    | 'referred'
    | 'valid'
    | 'invalid'
    | 'invalid_incomplete'
    | 'published'
    | 'archived'
    | 'draft'
    | 'withdrawn'
    | null;
  /**
   * The original representation
   */
  originalRepresentation: string | null;
  /**
   * Indicates if the representation is redacted
   */
  redacted: boolean | null;
  /**
   * The redacted version of the representation
   */
  redactedRepresentation: string | null;
  /**
   * Unique identifier for the case team member that performed the redaction
   */
  redactedBy: string | null;
  /**
   * A list of reasons why the representation has been marked as invalid or incomplete.
   */
  invalidOrIncompleteDetails:
    | (
        | 'Received after deadline'
        | 'Includes personal or medical information'
        | 'Includes inflammatory content'
        | 'Duplicated or repeated comment'
        | 'Not relevant to this appeal'
        | 'Contains links to web pages'
        | 'No list of suggested conditions'
        | 'other_reason'
        | null
      )[]
    | null;
  /**
   * A list of free text reasons why the representation has been marked as invalid or incomplete
   */
  otherInvalidOrIncompleteDetails: string[] | null;
  /**
   * Source of the representation (citizen or LPA)
   */
  source: 'lpa' | 'citizen' | null;
  /**
   * Service User Id of the person or organisation making the representation
   */
  serviceUserId: string | null;
  /**
   * The type of representation
   */
  representationType: 'statement' | 'comment' | 'final_comment' | 'proofs_evidence' | null;
  dateReceived: string;
  /**
   * An array of documentIds
   */
  documentIds: string[];
  [k: string]: unknown;
}

/**
 * Schema defining the metadata for an appeal (S78)
 */
export interface AppealS78Case {
  /**
   * Internal case identifier
   */
  caseId: number | null;
  /**
   * External case identifier
   */
  caseReference: string;
  /**
   * Case submission id - link to draft submission created by appellant
   */
  submissionId?: string | null;
  /**
   * The processing status for the appeal
   */
  caseStatus:
    | 'assign_case_officer'
    | 'validation'
    | 'ready_to_start'
    | 'lpa_questionnaire'
    | 'issue_determination'
    | 'statements'
    | 'evidence'
    | 'witnesses'
    | 'final_comments'
    | 'complete'
    | 'invalid'
    | 'closed'
    | 'withdrawn'
    | 'awaiting_transfer'
    | 'transferred'
    | 'event'
    | 'awaiting_event';
  /**
   * The internal code for an appeal type, e.g. D (Householder)
   */
  caseType: 'C' | 'D' | 'F' | 'G' | 'H' | 'L' | 'Q' | 'S' | 'V' | 'W' | 'X' | 'Y' | 'Z';
  /**
   * The type of procedure for the appeal
   */
  caseProcedure: 'written' | 'hearing' | 'inquiry' | null;
  /**
   * A unique identifier for the Local Planning Authority
   */
  lpaCode: string;
  /**
   * Unique identifier for the case officer assigned to the case
   */
  caseOfficerId: string | null;
  /**
   * Unique identifier for the inspector assigned to the case
   */
  inspectorId: string | null;
  /**
   * A level used for allocation purposes
   */
  allocationLevel: 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | null;
  /**
   * A band used for allocation purposes
   */
  allocationBand: 1 | 2 | 3 | null;
  /**
   * A list of specialisms for allocation purposes
   */
  caseSpecialisms: string[] | null;
  /**
   * The date the appeal was submitted by the appellant
   */
  caseSubmittedDate: string;
  /**
   * The date the appeal was received
   */
  caseCreatedDate: string;
  /**
   * The date the appeal was last updated in the back-office
   */
  caseUpdatedDate: string;
  /**
   * The date since when the appeal was considered valid
   */
  caseValidDate: string | null;
  /**
   * The date the appeal was validated in the back-office
   */
  caseValidationDate: string | null;
  /**
   * The outcome of the validation action
   */
  caseValidationOutcome: 'valid' | 'invalid' | 'incomplete' | null;
  /**
   * A list of reasons why the appeal is invalid
   */
  caseValidationInvalidDetails: string[] | null;
  /**
   * A list of reasons why the appeal is incomplete
   */
  caseValidationIncompleteDetails: string[] | null;
  /**
   * When the validation outcome is incomplete, an extension may be granted to provide missing information
   */
  caseExtensionDate: string | null;
  /**
   * A date indicating when the case was started, resulting in the creation of a timetable
   */
  caseStartedDate: string | null;
  /**
   * A date indicating when the case was published
   */
  casePublishedDate: string | null;
  /**
   * Indicates if the case is linked, and the type of relationship
   */
  linkedCaseStatus: 'lead' | 'child' | null;
  /**
   * The reference of the lead case, if the case is a child case
   */
  leadCaseReference: string | null;
  /**
   * If the case is started and has a timetable, a deadline for the LPA to provide a response
   */
  lpaQuestionnaireDueDate: string | null;
  /**
   * The date the LPA provided a response to the case
   */
  lpaQuestionnaireSubmittedDate: string | null;
  /**
   * The date the LPA response was receeived
   */
  lpaQuestionnaireCreatedDate: string | null;
  /**
   * The date indicating when the questionnaire review was completed and the questionnaire published
   */
  lpaQuestionnairePublishedDate: string | null;
  /**
   * The outcome of the validation action
   */
  lpaQuestionnaireValidationOutcome: 'complete' | 'incomplete' | null;
  /**
   * The date the LPA response was validated
   */
  lpaQuestionnaireValidationOutcomeDate: string | null;
  /**
   * A list of reasons why the questionnaire is incomplete
   */
  lpaQuestionnaireValidationDetails: string[] | null;
  /**
   * A statement provided by the LPA
   */
  lpaStatement: string | null;
  /**
   * The date the appeal was withdrawn by the appellant
   */
  caseWithdrawnDate: string | null;
  /**
   * The date the appeal was transferred to a new case of a different type
   */
  caseTransferredDate: string | null;
  /**
   * The date the appeal was closed and the appellant requested to resubmit
   */
  transferredCaseClosedDate: string | null;
  /**
   * The date of the appeal decision
   */
  caseDecisionOutcomeDate: string | null;
  /**
   * The date the appeal decision was published
   */
  caseDecisionPublishedDate: string | null;
  /**
   * The final outcome for the decision
   */
  caseDecisionOutcome: 'allowed' | 'split_decision' | 'dismissed' | 'invalid' | null;
  /**
   * The date the appeal decision letter
   */
  caseCompletedDate: string | null;
  /**
   * Indicates if an enforcement notice is the reason for the appeal
   */
  enforcementNotice: boolean | null;
  /**
   * The unique identifier of the LPA application
   */
  applicationReference: string;
  /**
   * The date of the original LPA application
   */
  applicationDate: string;
  /**
   * The outcome of the original LPA decision
   */
  applicationDecision: 'granted' | 'refused' | 'not_received';
  /**
   * The date of the original LPA decision
   */
  applicationDecisionDate: string | null;
  /**
   * The statutory deadline for submitting an appeal from the original LPA decision date
   */
  caseSubmissionDueDate: string | null;
  /**
   * First line of address for the appeal site
   */
  siteAddressLine1: string;
  /**
   * Second line of address for the appeal site
   */
  siteAddressLine2: string | null;
  /**
   * Town / City of the site address
   */
  siteAddressTown: string;
  /**
   * County of the site address
   */
  siteAddressCounty: string | null;
  /**
   * Postal code of the site address
   */
  siteAddressPostcode: string;
  /**
   * Provided information on site accessibility
   */
  siteAccessDetails: string[] | null;
  /**
   * Provided information on site health and safety
   */
  siteSafetyDetails: string[] | null;
  /**
   * The site area, in square meters
   */
  siteAreaSquareMetres: number | null;
  /**
   * The floor space, in square meters
   */
  floorSpaceSquareMetres: number | null;
  /**
   * Indicates if the LPA considers the appeal type appropriate
   */
  isCorrectAppealType: boolean | null;
  /**
   * Indicates if the site is in a green belt
   */
  isGreenBelt: boolean | null;
  /**
   * Indicates if the site is in a conservation area
   */
  inConservationArea: boolean | null;
  /**
   * Indicates if the appellant has complete ownership of the site
   */
  ownsAllLand: boolean | null;
  /**
   * Indicates if the appellant has partial ownership of the site
   */
  ownsSomeLand: boolean | null;
  /**
   * Indicates if the appellant knows other owners of the site
   */
  knowsOtherOwners: 'Yes' | 'No' | 'Some' | null;
  /**
   * Indicates if the appellant knows all owners of the site
   */
  knowsAllOwners: 'Yes' | 'No' | 'Some' | null;
  /**
   * Indicates if the appellant has advertised the appeal to the LPA decision
   */
  advertisedAppeal: boolean | null;
  /**
   * The methods used to notify relevant parties
   */
  notificationMethod: ('notice' | 'letter' | 'advert' | null)[] | null;
  /**
   * Indicates if the appellant has informed other owners of the site
   */
  ownersInformed: boolean | null;
  /**
   * The original description of the development, as provided by the appellant
   */
  originalDevelopmentDescription: string | null;
  /**
   * Indicates that the LPA has changed the development description
   */
  changedDevelopmentDescription: boolean | null;
  /**
   * New conditions details provided by the LPA
   */
  newConditionDetails: string | null;
  /**
   * A list of related case references known to the appellant and the LPA
   */
  nearbyCaseReferences: string[] | null;
  /**
   * A list of neighbouring site addresses
   */
  neighbouringSiteAddresses:
    | {
        /**
         * First line of address of the site
         */
        neighbouringSiteAddressLine1: string;
        /**
         * Second line of address of the site
         */
        neighbouringSiteAddressLine2: string | null;
        /**
         * Town / City of the site address
         */
        neighbouringSiteAddressTown: string;
        /**
         * County of the site address
         */
        neighbouringSiteAddressCounty: string | null;
        /**
         * Postal code of the site address
         */
        neighbouringSiteAddressPostcode: string;
        /**
         * Provided information on site accessibility on this address
         */
        neighbouringSiteAccessDetails: string | null;
        /**
         * Provided information on site health and safety on this address
         */
        neighbouringSiteSafetyDetails: string | null;
        [k: string]: unknown;
      }[]
    | null;
  /**
   * A general reason given for the need to visit any neighbours
   */
  reasonForNeighbourVisits: string | null;
  /**
   * A list of affected listed building IDs from Historic England
   */
  affectedListedBuildingNumbers: string[] | null;
  /**
   * A list of changed listed building IDs from Historic England
   */
  changedListedBuildingNumbers: string[] | null;
  /**
   * Indicates if the appellant has applied for costs
   */
  appellantCostsAppliedFor: boolean | null;
  /**
   * Indicates if the appellant has applied for costs
   */
  lpaCostsAppliedFor: boolean | null;
  /**
   * Indicates if the site is an agricultural holding
   */
  agriculturalHolding: boolean | null;
  /**
   * Indicates if the site is a tenant agricultural holding
   */
  tenantAgriculturalHolding: boolean | null;
  /**
   * Indicates if the site is an agricultural holding with other tenants
   */
  otherTenantsAgriculturalHolding: boolean | null;
  /**
   * If the site is an agricultural holding, indicates tenants are informed
   */
  informedTenantsAgriculturalHolding: boolean | null;
  /**
   * The procedure preference indicated by the appellant
   */
  appellantProcedurePreference: 'written' | 'hearing' | 'inquiry' | null;
  /**
   * The procedure details preference indicated by the appellant
   */
  appellantProcedurePreferenceDetails: string | null;
  /**
   * The duration of the procedure indicated by the appellant
   */
  appellantProcedurePreferenceDuration: number | null;
  /**
   * The number of witnesses appellant has suggested for inquiries preference
   */
  appellantProcedurePreferenceWitnessCount: number | null;
  /**
   * The planning obligation information, if available
   */
  statusPlanningObligation: string | null;
  /**
   * Indicates that a scheduled monument is affected
   */
  affectsScheduledMonument: boolean | null;
  /**
   * Indicates the existence of protected species
   */
  hasProtectedSpecies: boolean | null;
  /**
   * Indicates an area of outstanding beauty (National Landscape)
   */
  isAonbNationalLandscape: boolean | null;
  /**
   * The designated site names
   */
  designatedSitesNames: string[] | null;
  /**
   * Indicates a traveller site
   */
  isGypsyOrTravellerSite: boolean | null;
  /**
   * Indicates a PROW (public right of way)
   */
  isPublicRightOfWay: boolean | null;
  /**
   * The impact schedule from EIA
   */
  eiaEnvironmentalImpactSchedule: 'schedule-1' | 'schedule-2' | null;
  /**
   * The development description from EIA
   */
  eiaDevelopmentDescription:
    | 'agriculture-aquaculture'
    | 'change-extensions'
    | 'chemical-industry'
    | 'energy-industry'
    | 'extractive-industry'
    | 'food-industry'
    | 'infrastructure-projects'
    | 'mineral-industry'
    | 'other-projects'
    | 'production-processing-of-metals'
    | 'rubber-industry'
    | 'textile-industries'
    | 'tourism-leisure'
    | null;
  /**
   * The sensitive area details from EIA
   */
  eiaSensitiveAreaDetails: string | null;
  /**
   * EIA specific threshold
   */
  eiaColumnTwoThreshold: boolean | null;
  /**
   * EIA screening opinion
   */
  eiaScreeningOpinion: boolean | null;
  /**
   * EIA environmental statement required
   */
  eiaRequiresEnvironmentalStatement: boolean | null;
  /**
   * EIA completed environmental statement required
   */
  eiaCompletedEnvironmentalStatement: boolean | null;
  /**
   * Indicates statutory consultees
   */
  hasStatutoryConsultees: boolean | null;
  /**
   * The details of the bodies consulted
   */
  consultedBodiesDetails: string | null;
  /**
   * Indicates the existence of an infrastructure levy
   */
  hasInfrastructureLevy: boolean | null;
  /**
   * Indicates if the infrastructure levy is formally adopted
   */
  isInfrastructureLevyFormallyAdopted: boolean | null;
  /**
   * The date of the infrastructure levy adoption
   */
  infrastructureLevyAdoptedDate: string | null;
  /**
   * The expected date of the infrastructure levy
   */
  infrastructureLevyExpectedDate: string | null;
  /**
   * The procedure preference indicated by the LPA
   */
  lpaProcedurePreference: 'written' | 'hearing' | 'inquiry' | null;
  /**
   * The procedure details preference indicated by the LPA
   */
  lpaProcedurePreferenceDetails: string | null;
  /**
   * The duration of enquiry indicated by the LPA
   */
  lpaProcedurePreferenceDuration: number | null;
  caseworkReason: string | null;
  importantInformation: string | null;
  jurisdiction: string | null;
  redeterminedIndicator: string | null;
  /**
   * The date of the cost report
   */
  dateCostsReportDespatched: string | null;
  dateNotRecoveredOrDerecovered: string | null;
  dateRecovered: string | null;
  originalCaseDecisionDate: string | null;
  targetDate: string | null;
  appellantCommentsSubmittedDate: string | null;
  appellantStatementSubmittedDate: string | null;
  appellantProofsSubmittedDate: string | null;
  finalCommentsDueDate: string | null;
  interestedPartyRepsDueDate: string | null;
  lpaCommentsSubmittedDate: string | null;
  lpaProofsSubmittedDate: string | null;
  lpaStatementSubmittedDate: string | null;
  proofsOfEvidenceDueDate: string | null;
  siteNoticesSentDate: string | null;
  statementDueDate: string | null;
  /**
   * The net gain in residences of the proposed development
   */
  numberOfResidencesNetChange: number | null;
  siteGridReferenceEasting: string | null;
  siteGridReferenceNorthing: string | null;
  siteViewableFromRoad: boolean | null;
  siteWithinSSSI: boolean | null;
  typeOfPlanningApplication:
    | 'full-appeal'
    | 'householder-planning'
    | 'outline-planning'
    | 'prior-approval'
    | 'reserved-matters'
    | 'removal-or-variation-of-conditions'
    | null;
  developmentType:
    | 'householder'
    | 'change-of-use'
    | 'major-dwellings'
    | 'major-industry-storage'
    | 'major-offices'
    | 'major-retail-services'
    | 'major-traveller-caravan'
    | 'mineral-workings'
    | 'minor-dwellings'
    | 'minor-industry-storage'
    | 'minor-offices'
    | 'minor-retail-services'
    | 'minor-traveller-caravan'
    | 'other-major'
    | 'other-minor'
    | null;
  [k: string]: unknown;
}

/**
 * Schema defining the data returned by the DaRT API
 */
export interface DaRTAPIResponse {
  /**
   * Internal case identifier
   */
  caseId?: number;
  /**
   * External case identifier
   */
  caseReference: number;
  /**
   * The processing state for the case
   */
  caseStatus?: string;
  /**
   * The internal code for a type of case
   */
  caseType?: string;
  /**
   * The type of procedure for the case
   */
  caseProcedure?: string | null;
  /**
   * PINS internal code for LPA
   */
  lpaCode?: string | null;
  /**
   * Name of the LPA
   */
  lpaName?: string | null;
  /**
   * A case level used for allocation purposes
   */
  allocationLevel?: string | null;
  /**
   * A band used for allocation purposes
   */
  allocationBand?: string | null;
  /**
   * A list of case specialisms for allocation purposes
   */
  caseSpecialisms?: string[] | null;
  /**
   * The date the case was submitted by the appellant
   */
  caseSubmittedDate?: string;
  /**
   * The date the case was received
   */
  caseCreatedDate?: string;
  /**
   * The date the case was last updated in the back-office
   */
  caseUpdatedDate?: string;
  /**
   * The date since when the case was considered valid
   */
  caseValidDate?: string | null;
  /**
   * The date the case was validated in the back-office
   */
  caseValidationDate?: string | null;
  /**
   * The outcome of the validation action
   */
  caseValidationOutcome?: string | null;
  /**
   * A list of reasons why the appeal is invalid
   */
  caseValidationInvalidDetails?: string[] | null;
  /**
   * A list of reasons why the appeal is incomplete
   */
  caseValidationIncompleteDetails?: string[] | null;
  /**
   * When the validation outcome is incomplete, an extension may be granted to provide missing information
   */
  caseExtensionDate?: string | null;
  /**
   * A date indicating when the case was started, resulting in the creation of a timetable
   */
  caseStartedDate?: string | null;
  /**
   * A date indicating when the case was published
   */
  casePublishedDate?: string | null;
  /**
   * Indicates if the case is linked, and the type of relationship
   */
  linkedCaseStatus?: string | null;
  /**
   * The reference of the lead case, if the case is a child case
   */
  leadCaseReference?: string | null;
  /**
   * The date the case was withdrawn by the appellant
   */
  caseWithdrawnDate?: string | null;
  /**
   * The date the case was transferred to a new case of a different type
   */
  caseTransferredDate?: string | null;
  /**
   * The date the case was closed and the appellant requested to resubmit
   */
  transferredCaseClosedDate?: string | null;
  /**
   * The date of the case decision
   */
  caseDecisionOutcomeDate?: string | null;
  /**
   * The date the case decision was published
   */
  caseDecisionPublishedDate?: string | null;
  /**
   * The final outcome for the decision
   */
  caseDecisionOutcome?: string | null;
  /**
   * The date the case decision letter
   */
  caseCompletedDate?: string | null;
  /**
   * Indicates if an enforcement notice is the reason for the appeal
   */
  enforcementNotice?: boolean | null;
  /**
   * The unique identifier of the LPA application
   */
  applicationReference: string;
  /**
   * The date of the original LPA application
   */
  applicationDate?: string;
  /**
   * The outcome of the original LPA decision
   */
  applicationDecision?: string;
  /**
   * The date of the original LPA decision
   */
  lpaDecisionDate?: string | null;
  /**
   * The statutory deadline for submitting an appeal from the original LPA decision date
   */
  caseSubmissionDueDate?: string | null;
  /**
   * First line of case site address
   */
  siteAddressLine1?: string | null;
  /**
   * Second line of case site address
   */
  siteAddressLine2?: string | null;
  /**
   * Town / City of the site address
   */
  siteAddressTown?: string | null;
  /**
   * County of the site address
   */
  siteAddressCounty?: string | null;
  /**
   * Postal code of the site address
   */
  siteAddressPostcode?: string | null;
  /**
   * Indicates if the LPA considers the appeal type appropriate
   */
  isCorrectAppealType?: boolean | null;
  /**
   * The original description of the development, as provided by the appellant
   */
  originalDevelopmentDescription?: string | null;
  /**
   * Indicates that the LPA has changed the development description
   */
  changedDevelopmentDescription?: boolean | null;
  /**
   * Since the original application, a number of things have changed.
   */
  newConditionDetails?: string | null;
  /**
   * A list of related case references known to the appellant and the LPA
   */
  nearbyCaseReferences?: string[] | null;
  /**
   * A list of neighbouring site addresses
   */
  neighbouringSiteAddresses?:
    | {
        /**
         * First line of address of the neighbouring site
         */
        neighbouringSiteAddressLine1: string | null;
        /**
         * Second line of address of the neighbouring site
         */
        neighbouringSiteAddressLine2: string | null;
        /**
         * Town / City of the neighbouring site address
         */
        neighbouringSiteAddressTown: string | null;
        /**
         * County of the neighbouring site address
         */
        neighbouringSiteAddressCounty: string | null;
        /**
         * Postal code of the neighbouring site address
         */
        neighbouringSiteAddressPostcode: string | null;
        [k: string]: unknown;
      }[]
    | null;
  /**
   * A list of affected listed building IDs from Historic England
   */
  affectedListedBuildingNumbers?: string[] | null;
  /**
   * Indicates if the appellant has applied for costs
   */
  appellantCostsAppliedFor?: boolean | null;
  /**
   * Indicates if the LPA has applied for costs
   */
  lpaCostsAppliedFor?: boolean | null;
  /**
   * Name of the appellant
   */
  appellantName?: string;
  /**
   * The type of event
   */
  typeOfEvent?: string | null;
  /**
   * Event start date and time
   */
  startDateOfTheEvent?: string | null;
  /**
   * Name of inspector allocated to case
   */
  inspectorName?: string | null;
  /**
   * name of case officer assigned to case
   */
  caseOfficerName?: string | null;
  /**
   * The qualifications of the inspector
   */
  inspectorQualifications?: string | null;
  [k: string]: unknown;
}

/**
 * A list of users from EntraID
 */
export interface EntraIDUserObjects {
  /**
   * The employee's unique identifier
   */
  employeeId: string;
  /**
   * The unique identifier within the EntraID
   */
  id: string;
  /**
   * The employee's given name
   */
  givenName: string;
  /**
   * The employee's surname
   */
  surname: string;
  /**
   * The employee's email address
   */
  userPrincipalName: string;
  [k: string]: unknown;
}

/**
 * Folders can have optional parents. All folders belong to a Case.
 */
export interface Folder {
  /**
   * The unique identifier within the Back Office.
   */
  id: number;
  /**
   * The case reference this folder belongs to.
   */
  caseReference: string;
  /**
   * Folder display name in English.
   */
  displayNameEnglish: string;
  /**
   * Folder display name in Welsh.
   */
  displayNameWelsh: string | null;
  /**
   * Optional parent folder ID.
   */
  parentFolderId: number | null;
  caseStage:
    | 'draft'
    | 'pre-application'
    | 'acceptance'
    | 'pre-examination'
    | 'examination'
    | 'recommendation'
    | 'decision'
    | 'post_decision'
    | 'withdrawn'
    | 'developers_application'
    | 'correspondence'
    | '0'
    | null;
  [k: string]: unknown;
}

/**
 * Schema defining the data returned by the DaRT API
 */
export interface GetTimesheetsAPIResponse {
  /**
   * External case identifier
   */
  caseReference: number;
  /**
   * The unique identifier of the application
   */
  applicationReference: string;
  /**
   * First line of case site address
   */
  siteAddressLine1?: string;
  /**
   * Second line of case site address
   */
  siteAddressLine2?: string;
  /**
   * Town / City of the site address
   */
  siteAddressTown?: string;
  /**
   * County of the site address
   */
  siteAddressCounty?: string;
  /**
   * Postal code of the site address
   */
  siteAddressPostcode?: string;
  [k: string]: unknown;
}

/**
 * Delta of listed building data pushed by the ODW. Primary use case is to support Appeals UI
 */
export interface ListedBuilding {
  /**
   * A unique identifier for the listed building.
   */
  entity: number;
  /**
   * Reference number for the listed buildign
   */
  reference: string;
  /**
   * Name of listed building
   */
  name: string;
  /**
   * Grade assigned to the listing.
   */
  listedBuildingGrade: string;
  [k: string]: unknown;
}

/**
 * NSIP document schema
 */
export interface NSIPDocument {
  /**
   * The unique identifier for the file. This will be different to documentReference
   */
  documentId: string;
  /**
   * Internal case identifier
   */
  caseId: number | null;
  caseRef: string | null;
  /**
   * Reference used throughout ODT <CaseRef>-<SequenceNo>
   */
  documentReference: string | null;
  version: number;
  examinationRefNo: string | null;
  /**
   * Current stored filename of the file
   */
  filename: string;
  /**
   * Original filename of file
   */
  originalFilename: string;
  size: number;
  mime: string | null;
  /**
   * The internal location of the document
   */
  documentURI: string;
  /**
   * The location of the published document. Only applicable to documents which are published.
   */
  publishedDocumentURI: string | null;
  path: string | null;
  virusCheckStatus: 'not_scanned' | 'scanned' | 'affected' | null;
  fileMD5: string | null;
  dateCreated: string;
  lastModified: string | null;
  caseType: 'nsip' | 'has' | null;
  redactedStatus: 'not_redacted' | 'redacted' | null;
  publishedStatus:
    | 'not_checked'
    | 'checked'
    | 'ready_to_publish'
    | 'do_not_publish'
    | 'publishing'
    | 'published'
    | 'archived'
    | 'unpublished'
    | 'unpublishing'
    | 'awaiting_upload'
    | null;
  datePublished: string | null;
  documentType: string | null;
  securityClassification: 'public' | 'official' | 'secret' | 'top-secret' | null;
  sourceSystem: 'back-office-appeals' | 'back-office-applications' | 'horizon' | 'ni_file' | 'sharepoint' | null;
  origin: 'pins' | 'citizen' | 'lpa' | 'ogd' | null;
  owner: string | null;
  /**
   * Name of person who authored document
   */
  author: string | null;
  /**
   * Welsh name of person who authored document
   */
  authorWelsh?: string | null;
  /**
   * The on behalf of or agent submitter of document
   */
  representative: string | null;
  description: string | null;
  descriptionWelsh?: string | null;
  documentCaseStage:
    | 'draft'
    | 'pre-application'
    | 'acceptance'
    | 'pre-examination'
    | 'examination'
    | 'recommendation'
    | 'decision'
    | 'post_decision'
    | 'withdrawn'
    | 'developers_application'
    | 'correspondence'
    | '0'
    | null;
  /**
   * Filter field to provide additional filtering
   */
  filter1: string | null;
  /**
   * Filter field in Welsh
   */
  filter1Welsh?: string | null;
  /**
   * Filter field to provide additional filtering
   */
  filter2: string | null;
  /**
   * The folder where the document exists
   */
  horizonFolderId: string | null;
  /**
   * The GUID of the transcript document (if one was provided).
   */
  transcriptId: string | null;
  [k: string]: unknown;
}

/**
 * Examination Timetable for an NSIP Project
 */
export interface ExaminationTimetable {
  /**
   * Unique string reference of the associated Case
   */
  caseReference: string;
  /**
   * whether the Examination Timetable has been published or not
   */
  published?: boolean | null;
  events: Event[];
  [k: string]: unknown;
}
export interface Event {
  /**
   * Event Identifier
   */
  eventId: number;
  /**
   * Compulsory Acquisition Hearing/Deadline/Issue Specific Hearing etc
   */
  type:
    | 'Accompanied Site Inspection'
    | 'Compulsory Acquisition Hearing'
    | 'Deadline'
    | 'Deadline For Close Of Examination'
    | 'Issued By'
    | 'Issue Specific Hearing'
    | 'Open Floor Hearing'
    | 'Other Meeting'
    | 'Preliminary Meeting'
    | 'Procedural Deadline (Pre-Examination)'
    | 'Procedural Decision'
    | 'Publication Of';
  /**
   * Title Of Examination Timetable Event
   */
  eventTitle: string;
  /**
   * Title Of Examination Timetable Event In Welsh
   */
  eventTitleWelsh?: string | null;
  description: string;
  descriptionWelsh?: string | null;
  /**
   * Optional start date for event window
   */
  eventDeadlineStartDate?: string | null;
  /**
   * Event Date = effective deadline (end) date
   */
  date: string;
  eventLineItems: LineItem[];
  [k: string]: unknown;
}
export interface LineItem {
  description: string;
  descriptionWelsh?: string | null;
  [k: string]: unknown;
}

/**
 * NSIP Project Update (formerly known as Banners)
 */
export interface NSIPProjectUpdate {
  /**
   * The unique identifier within the Back Office.
   */
  id: number;
  /**
   * the case reference this update relates to
   */
  caseReference: string;
  /**
   * The date the update was published
   */
  updateDate: string | null;
  /**
   * Internal title or name of the update
   */
  updateName: string | null;
  /**
   * HTML content of the update in English. Can only include `<a> <b> <ul> <li>` tags.
   */
  updateContentEnglish: string;
  /**
   * HTML content of the update in Welsh. Can only include `<a> <b> <ul> <li>` tags.
   */
  updateContentWelsh: string | null;
  /**
   * The current status of this update
   */
  updateStatus: 'draft' | 'ready-to-publish' | 'published' | 'ready-to-unpublish' | 'unpublished' | 'archived';
  [k: string]: unknown;
}

/**
 * Subset of Pins Data Model [Case]
 */
export interface NSIPProject {
  /**
   * The unique identifier within the Back Office. This is not the same as the case reference
   */
  caseId: number;
  caseReference: string | null;
  /**
   * Name of project
   */
  projectName: string | null;
  /**
   * Name of project in Welsh
   */
  projectNameWelsh?: string | null;
  projectDescription: string | null;
  projectDescriptionWelsh?: string | null;
  /**
   * Decision: approved/refused/split-decision
   */
  decision: 'approved' | 'refused' | 'split-decision' | null;
  publishStatus: 'published' | 'unpublished' | null;
  /**
   * {Sector Abbreviation} - {Sector Display Name}
   */
  sector:
    | 'BC - Business and Commercial'
    | 'EN - Energy'
    | 'TR - Transport'
    | 'WA - Water'
    | 'WS - Waste'
    | 'WW - Waste Water'
    | null;
  /**
   * {SubSector Abbreviation} - {SubSector Display Name}
   */
  projectType:
    | 'BC01 - Office Use'
    | 'BC02 - Research and Development of Products or Processes'
    | 'BC03 - An Industrial Process or Processes'
    | 'BC04 - Storage or Distribution of Goods'
    | 'BC05 - Conferences'
    | 'BC06 - Exhibitions'
    | 'BC07 - Sport'
    | 'BC08 - Leisure'
    | 'BC09 - Tourism'
    | 'EN01 - Generating Stations'
    | 'EN02 - Electric Lines'
    | 'EN03 - Underground Gas Storage Facilities'
    | 'EN04 - LNG Facilities'
    | 'EN05 - Gas Reception Facilities'
    | 'EN06 - Gas Transporter Pipe-lines'
    | 'EN07 - Other Pipe-lines'
    | 'TR01 - Highways'
    | 'TR02 - Airports'
    | 'TR03 - Harbour Facilities'
    | 'TR04 - Railways'
    | 'TR05 - Rail Freight Interchanges'
    | 'WS01 - Hazardous Waste Facilities'
    | 'WW01 - Waste Water Treatment Plants'
    | 'WA01 - Dams and Reservoirs'
    | 'WA02 - Transfer of Water Resources'
    | null;
  sourceSystem: 'back-office-applications' | 'horizon';
  /**
   * Process stage identifier
   */
  stage:
    | 'draft'
    | 'pre_application'
    | 'acceptance'
    | 'pre_examination'
    | 'examination'
    | 'recommendation'
    | 'decision'
    | 'post_decision'
    | 'withdrawn'
    | null;
  /**
   * Description of site location
   */
  projectLocation: string | null;
  /**
   * Description of site location in Welsh
   */
  projectLocationWelsh?: string | null;
  /**
   * PINS Project email address pubished on website
   */
  projectEmailAddress: string | null;
  regions: (
    | 'east_midlands'
    | 'eastern'
    | 'london'
    | 'north_east'
    | 'north_west'
    | 'south_east'
    | 'south_west'
    | 'wales'
    | 'west_midlands'
    | 'yorkshire_and_the_humber'
  )[];
  /**
   * Drives addition of Transboundary tab on website. [TODO]
   */
  transboundary: boolean | null;
  /**
   * Project site Easting co-ordinate.
   */
  easting: number | null;
  /**
   * Project site Northing co-ordinate.
   */
  northing: number | null;
  /**
   * Welsh Language translation required.
   */
  welshLanguage: boolean | null;
  /**
   * Resolution of pinned map. Set when co-ordinates are created.
   */
  mapZoomLevel: 'country' | 'region' | 'county' | 'borough' | 'district' | 'city' | 'town' | 'junction' | 'none' | null;
  /**
   * Relevant Government Department. [TODO]
   */
  secretaryOfState: string | null;
  _preApplicationDates?: unknown;
  /**
   * Date at which applicant notify PINS of a project (pre-publishing)
   */
  datePINSFirstNotifiedOfProject: string | null;
  /**
   * Date Project Appears On Website
   */
  dateProjectAppearsOnWebsite: string | null;
  /**
   * Approximate Anticipated Submission Date Of Application, e.g. Q3 2023
   */
  anticipatedSubmissionDateNonSpecific: string | null;
  /**
   * Anticipated Submission Date Of Application
   */
  anticipatedDateOfSubmission: string | null;
  /**
   * (TBC by Env. Services Team)
   */
  screeningOpinionSought: string | null;
  /**
   * (TBC by Env. Services Team)
   */
  screeningOpinionIssued: string | null;
  /**
   * (TBC by Env. Services Team)
   */
  scopingOpinionSought: string | null;
  /**
   * (TBC by Env. Services Team)
   */
  scopingOpinionIssued: string | null;
  /**
   * Applicant must notify PINS of statutory consultation
   */
  section46Notification: string | null;
  _acceptanceDates?: unknown;
  /**
   * Date Applcation is submitted
   */
  dateOfDCOSubmission: string | null;
  /**
   * DeadlineForAcceptanceDecision
   */
  deadlineForAcceptanceDecision: string | null;
  /**
   * Date Application is Formerly Accepted by PINS
   */
  dateOfDCOAcceptance: string | null;
  /**
   * Date of Non Acceptance
   */
  dateOfNonAcceptance: string | null;
  _preExaminationDates?: unknown;
  /**
   * Date at which point publish can submit relevant reps
   */
  dateOfRepresentationPeriodOpen: string | null;
  /**
   * Date at which point publish can no longer submit relevant reps
   */
  dateOfRelevantRepresentationClose: string | null;
  /**
   * ExtensionToDateRelevantRepresentationsClose
   */
  extensionToDateRelevantRepresentationsClose: string | null;
  /**
   * Date at which relevant reps appear on the website
   */
  dateRRepAppearOnWebsite: string | null;
  dateIAPIDue: string | null;
  rule6LetterPublishDate: string | null;
  /**
   * Meeting between all parties inc public
   */
  preliminaryMeetingStartDate: string | null;
  notificationDateForPMAndEventsDirectlyFollowingPM: string | null;
  notificationDateForEventsDeveloper: string | null;
  _examinationDates?: unknown;
  /**
   * Applicant has notified all parties of application
   */
  dateSection58NoticeReceived: string | null;
  /**
   * ConfirmedStartOfExamination by panel
   */
  confirmedStartOfExamination: string | null;
  rule8LetterPublishDate: string | null;
  /**
   * DeadlineForCloseOfExamination
   */
  deadlineForCloseOfExamination: string | null;
  /**
   * ConfirmedSEndOfExamination by panel
   */
  dateTimeExaminationEnds: string | null;
  /**
   * Examination Period extended to this date
   */
  stage4ExtensionToExamCloseDate: string | null;
  _recommendationDates?: unknown;
  /**
   * DeadlineForSubmissionOfRecommendation
   */
  deadlineForSubmissionOfRecommendation: string | null;
  /**
   * Date recomm report sent to SoS
   */
  dateOfRecommendations: string | null;
  /**
   * Recommendation period extended to this date
   */
  stage5ExtensionToRecommendationDeadline: string | null;
  _decisionDates?: unknown;
  /**
   * DeadlineForDecision
   */
  deadlineForDecision: string | null;
  /**
   * Decision by SoS
   */
  confirmedDateOfDecision: string | null;
  /**
   * Decision period extended to this date
   */
  stage5ExtensionToDecisionDeadline: string | null;
  _postDecisionDates?: unknown;
  /**
   * Judicial Review
   */
  jRPeriodEndDate: string | null;
  _withdrawalDates?: unknown;
  /**
   * DateProjectWithdrawn by applicant
   */
  dateProjectWithdrawn: string | null;
  /**
   * Maps to [Employee].[EmployeeID].
   */
  operationsLeadId: string | null;
  /**
   * New NSIP role, Maps to [Employee].[EmployeeID]
   */
  operationsManagerId: string | null;
  /**
   * Maps to [Employee].[EmployeeID]
   */
  caseManagerId: string | null;
  nsipOfficerIds: string[];
  nsipAdministrationOfficerIds: string[];
  /**
   * Maps to [Employee].[EmployeeID]
   */
  leadInspectorId: string | null;
  inspectorIds: string[];
  /**
   * Maps to [Employee].[EmployeeID]
   */
  environmentalServicesOfficerId: string | null;
  /**
   * Maps to [Employee].[EmployeeID]
   */
  legalOfficerId: string | null;
  /**
   * Maps to [ServiceUser].[id] where the serviceUserType is Applicant
   */
  applicantId: string | null;
  /**
   * Has this case been migrated from the legacy system? True if so.
   */
  migrationStatus: boolean | null;
  /**
   * Date at which relevant reps can be reopened
   */
  dateOfReOpenRelevantRepresentationStart: string | null;
  /**
   * Date at which relevant reps can no longer be reopened
   */
  dateOfReOpenRelevantRepresentationClose: string | null;
  /**
   * Is this an application for a material change?
   */
  isMaterialChange?: boolean | null;
  [k: string]: unknown;
}

/**
 * NSIP Representation schema
 */
export interface Representation {
  representationId: number;
  referenceId: string | null;
  examinationLibraryRef: string | null;
  caseRef: string;
  /**
   * The unique identifier within the Back Office. This is not the same as the case reference
   */
  caseId: number | null;
  status:
    | 'awaiting_review'
    | 'referred'
    | 'valid'
    | 'invalid'
    | 'published'
    | 'archived'
    | 'draft'
    | 'withdrawn'
    | null;
  originalRepresentation: string;
  redacted: boolean | null;
  redactedRepresentation: string | null;
  redactedBy: string | null;
  redactedNotes: string | null;
  representationFrom: 'PERSON' | 'ORGANISATION' | 'AGENT' | null;
  /**
   * ServiceUser Id of the person or organisation being represented
   */
  representedId: string;
  /**
   * ServiceUser Id of the person or organisation submitting representation in the case of Agent representationFrom
   */
  representativeId: string | null;
  registerFor: 'PERSON' | 'ORGANISATION' | 'FAMILY_GROUP' | null;
  representationType:
    | 'Local Authorities'
    | 'Parish Councils'
    | 'Members of the Public/Businesses'
    | 'Public & Businesses'
    | 'Statutory Consultees'
    | 'Non-Statutory Organisations'
    | 'Another Individual'
    | null;
  dateReceived: string;
  attachmentIds: string[];
  [k: string]: unknown;
}

/**
 * Subscribers are a subset of Service Users, part of the PINS Data Model
 */
export interface NsipSubscription {
  /**
   * The unique identifier within the Back Office. Ignored as part of register-nsip-subscription.
   */
  subscriptionId: number | null;
  /**
   * the case reference the subscription relates to
   */
  caseReference: string;
  emailAddress: string;
  /**
   * which update does the subscriber want to get notified of. For multiple types, use multiple messages.
   */
  subscriptionType: 'allUpdates' | 'applicationSubmitted' | 'applicationDecided' | 'registrationOpen';
  /**
   * The date to start getting updates
   */
  startDate: string | null;
  /**
   * The date to stop getting updates
   */
  endDate: string | null;
  language: 'English' | 'Welsh' | null;
  [k: string]: unknown;
}

/**
 * Inspector attributes as per Horizon. This will be extended with SAP/Entra data
 */
export interface PINSInspector {
  /**
   * The PINS-generated unique horizon ID
   */
  horizonId: string;
  /**
   * The first name of the inspector
   */
  firstName: string;
  /**
   * The last name of the inspector
   */
  lastName: string;
  /**
   * The post name of the inspector
   */
  postName?: string | null;
  /**
   * The organisation name of the inspector
   */
  organisationName?: string | null;
  /**
   * The title of the inspector
   */
  title?: string | null;
  /**
   * The salutation of the inspector
   */
  salutation?: string | null;
  /**
   * The qualifications of the inspector
   */
  qualifications?: string | null;
  /**
   * The email address of the inspector
   */
  email: string | null;
  [k: string]: unknown;
}

/**
 * Local Planning Authority (LPA) attributes as per Horizon. This will be extended with ONS data
 */
export interface PINSLPA {
  /**
   * The PINS name of the LPA
   */
  lpaName: string;
  /**
   * The organisation type of the LPA
   */
  organisationType?: string;
  /**
   * The PINS-generated unqiue LPA code
   */
  pinsLpaCode: string;
  /**
   * LPA address Post Office Box
   */
  poBox?: string | null;
  /**
   * First line of LPA address
   */
  address1?: string | null;
  /**
   * Second line of LPA address
   */
  address2?: string | null;
  /**
   * LPA address city or town
   */
  city?: string | null;
  /**
   * LPA address county
   */
  county?: string | null;
  /**
   * LPA address postcode
   */
  postcode?: string | null;
  /**
   * LPA address country
   */
  country?: string | null;
  /**
   * LPA telephine number
   */
  telephoneNumber?: string | null;
  /**
   * LPA fax number
   */
  fax?: string | null;
  /**
   * LPA email address
   */
  emailAddress?: string | null;
  [k: string]: unknown;
}

/**
 * Section 51 Advice schema
 */
export interface S51Advice {
  adviceId: number;
  adviceReference: string;
  caseId: number | null;
  caseReference: string | null;
  /**
   * Title of the advice
   */
  title: string;
  /**
   * Title of the advice in Welsh
   */
  titleWelsh?: string | null;
  /**
   * Who the enquiry is from
   */
  from: string | null;
  /**
   * Who the enquiry is on behalf of
   */
  agent: string | null;
  /**
   * How the enquiry was made
   */
  method: 'phone' | 'email' | 'meeting' | 'post' | 'fax' | null;
  /**
   * Date the enquiry was made
   */
  enquiryDate: string | null;
  /**
   * Details of the enquiry
   */
  enquiryDetails: string | null;
  /**
   * Details of the enquiry in Welsh
   */
  enquiryDetailsWelsh?: string | null;
  /**
   * Who issued the advice
   */
  adviceGivenBy: string | null;
  /**
   * Date the advice was given
   */
  adviceDate: string | null;
  /**
   * Details of the advice
   */
  adviceDetails: string | null;
  /**
   * Details of the advice in Welsh
   */
  adviceDetailsWelsh?: string | null;
  status: 'checked' | 'unchecked' | 'readytopublish' | 'published' | 'donotpublish' | null;
  redactionStatus: 'unredacted' | 'redacted' | null;
  attachmentIds: string[];
  [k: string]: unknown;
}

/**
 * Service User of the planning inspectorate. Also contains role information by combining serviceUserType and caseReference.
 */
export interface ServiceUser {
  /**
   * A unique identifier for the entity.
   */
  id: string;
  /**
   * A formal greeting, e.g., Mr, Mrs, Ms.
   */
  salutation: string | null;
  /**
   * The first name of the individual.
   */
  firstName: string | null;
  /**
   * The last name of the individual.
   */
  lastName: string | null;
  /**
   * The first line of the address.
   */
  addressLine1: string | null;
  /**
   * The second line of the address, usually includes suite or apartment number.
   */
  addressLine2: string | null;
  /**
   * The town or city of the address.
   */
  addressTown: string | null;
  /**
   * The county in which the town or city is located.
   */
  addressCounty: string | null;
  /**
   * The postal code for the address.
   */
  postcode: string | null;
  /**
   * The country of the address.
   */
  addressCountry: string | null;
  /**
   * The name of the organisation associated with the individual.
   */
  organisation: string | null;
  /**
   * The type or nature of the organisation.
   */
  organisationType: string | null;
  /**
   * The individual's role or position within the organisation.
   */
  role: string | null;
  /**
   * The primary telephone contact number.
   */
  telephoneNumber: string | null;
  /**
   * An alternate or secondary phone number.
   */
  otherPhoneNumber: string | null;
  /**
   * A fax contact number.
   */
  faxNumber: string | null;
  /**
   * The primary email address for contact.
   */
  emailAddress: string | null;
  /**
   * Website address or URL.
   */
  webAddress: string | null;
  /**
   * Type or category of the service user.
   */
  serviceUserType:
    | 'Applicant'
    | 'Appellant'
    | 'Agent'
    | 'Rule6Party'
    | 'InterestedParty'
    | 'RepresentationContact'
    | 'Subscriber';
  /**
   * Reference number for a particular case or incident.
   */
  caseReference: string;
  /**
   * The originating system from where the data was sourced.
   */
  sourceSystem: string;
  /**
   * Unique identifier from the source system.
   */
  sourceSuid: string;
  [k: string]: unknown;
}

/**
 * Schema defining any properties common across all appeal types for appeal submissions
 */
export interface AppellantCommonSubmissionProperties {
  /**
   * Case submission id - link to draft submission created by appellant
   */
  submissionId: string;
  /**
   * The type of procedure for the appeal
   */
  caseProcedure: 'written' | 'hearing' | 'inquiry';
  /**
   * A unique identifier for the Local Planning Authority
   */
  lpaCode: string;
  /**
   * The date the appeal was submitted by the appellant
   */
  caseSubmittedDate: string;
  /**
   * Indicates if an enforcement notice is the reason for the appeal
   */
  enforcementNotice: boolean | null;
  /**
   * The unique identifier of the LPA application
   */
  applicationReference: string;
  /**
   * The date of the original LPA application
   */
  applicationDate: string;
  /**
   * The outcome of the original LPA decision
   */
  applicationDecision: 'granted' | 'refused' | 'not_received';
  /**
   * The date of the original LPA decision
   */
  applicationDecisionDate: string | null;
  /**
   * The statutory deadline for submitting an appeal from the original LPA decision date
   */
  caseSubmissionDueDate: string | null;
  /**
   * First line of address for the appeal site
   */
  siteAddressLine1: string;
  /**
   * Second line of address for the appeal site
   */
  siteAddressLine2: string | null;
  /**
   * Town / City of the site address
   */
  siteAddressTown: string;
  /**
   * County of the site address
   */
  siteAddressCounty: string | null;
  /**
   * Postal code of the site address
   */
  siteAddressPostcode: string;
  /**
   * Provided information on site accessibility
   */
  siteAccessDetails: string[] | null;
  /**
   * Provided information on site health and safety
   */
  siteSafetyDetails: string[] | null;
  /**
   * A list of neighbouring site addresses
   */
  neighbouringSiteAddresses:
    | {
        /**
         * First line of address of the site
         */
        neighbouringSiteAddressLine1: string;
        /**
         * Second line of address of the site
         */
        neighbouringSiteAddressLine2: string | null;
        /**
         * Town / City of the site address
         */
        neighbouringSiteAddressTown: string;
        /**
         * County of the site address
         */
        neighbouringSiteAddressCounty: string | null;
        /**
         * Postal code of the site address
         */
        neighbouringSiteAddressPostcode: string;
        /**
         * Provided information on site accessibility on this address
         */
        neighbouringSiteAccessDetails: string | null;
        /**
         * Provided information on site health and safety on this address
         */
        neighbouringSiteSafetyDetails: string | null;
        [k: string]: unknown;
      }[]
    | null;
  /**
   * A list of related case references known to the appellant and the LPA
   */
  nearbyCaseReferences: string[] | null;
  typeOfPlanningApplication?:
    | 'full-appeal'
    | 'householder-planning'
    | 'outline-planning'
    | 'prior-approval'
    | 'reserved-matters'
    | 'removal-or-variation-of-conditions'
    | null;
  [k: string]: unknown;
}

/**
 * Schema defining any HAS specific properties for submissions
 */
export type AppellantHASSubmissionProperties = AppellantCommonSubmissionProperties & {
  /**
   * Indicates if the site is in a green belt
   */
  isGreenBelt?: boolean | null;
  /**
   * The site area, in square meters
   */
  siteAreaSquareMetres?: number | null;
  /**
   * The floor space, in square meters
   */
  floorSpaceSquareMetres?: number | null;
  /**
   * Indicates if the appellant has complete ownership of the site
   */
  ownsAllLand?: boolean | null;
  /**
   * Indicates if the appellant has partial ownership of the site
   */
  ownsSomeLand?: boolean | null;
  /**
   * Indicates if the appellant knows other owners of the site
   */
  knowsOtherOwners?: 'Yes' | 'No' | 'Some' | null;
  /**
   * Indicates if the appellant knows all owners of the site
   */
  knowsAllOwners?: 'Yes' | 'No' | 'Some' | null;
  /**
   * Indicates if the appellant has advertised the appeal to the LPA decision
   */
  advertisedAppeal?: boolean | null;
  /**
   * Indicates if the appellant has informed other owners of the site
   */
  ownersInformed?: boolean | null;
  /**
   * The original description of the development, as provided by the appellant
   */
  originalDevelopmentDescription?: string | null;
  /**
   * Indicates that the LPA has changed the development description
   */
  changedDevelopmentDescription?: boolean | null;
  /**
   * Indicates if the appellant has applied for costs
   */
  appellantCostsAppliedFor?: boolean | null;
};

/**
 * Schema defining any properties common across all appeal types for appeal submissions
 */
export interface AppellantCommonSubmissionProperties {
  /**
   * Case submission id - link to draft submission created by appellant
   */
  submissionId: string;
  /**
   * The type of procedure for the appeal
   */
  caseProcedure: 'written' | 'hearing' | 'inquiry';
  /**
   * A unique identifier for the Local Planning Authority
   */
  lpaCode: string;
  /**
   * The date the appeal was submitted by the appellant
   */
  caseSubmittedDate: string;
  /**
   * Indicates if an enforcement notice is the reason for the appeal
   */
  enforcementNotice: boolean | null;
  /**
   * The unique identifier of the LPA application
   */
  applicationReference: string;
  /**
   * The date of the original LPA application
   */
  applicationDate: string;
  /**
   * The outcome of the original LPA decision
   */
  applicationDecision: 'granted' | 'refused' | 'not_received';
  /**
   * The date of the original LPA decision
   */
  applicationDecisionDate: string | null;
  /**
   * The statutory deadline for submitting an appeal from the original LPA decision date
   */
  caseSubmissionDueDate: string | null;
  /**
   * First line of address for the appeal site
   */
  siteAddressLine1: string;
  /**
   * Second line of address for the appeal site
   */
  siteAddressLine2: string | null;
  /**
   * Town / City of the site address
   */
  siteAddressTown: string;
  /**
   * County of the site address
   */
  siteAddressCounty: string | null;
  /**
   * Postal code of the site address
   */
  siteAddressPostcode: string;
  /**
   * Provided information on site accessibility
   */
  siteAccessDetails: string[] | null;
  /**
   * Provided information on site health and safety
   */
  siteSafetyDetails: string[] | null;
  /**
   * A list of neighbouring site addresses
   */
  neighbouringSiteAddresses:
    | {
        /**
         * First line of address of the site
         */
        neighbouringSiteAddressLine1: string;
        /**
         * Second line of address of the site
         */
        neighbouringSiteAddressLine2: string | null;
        /**
         * Town / City of the site address
         */
        neighbouringSiteAddressTown: string;
        /**
         * County of the site address
         */
        neighbouringSiteAddressCounty: string | null;
        /**
         * Postal code of the site address
         */
        neighbouringSiteAddressPostcode: string;
        /**
         * Provided information on site accessibility on this address
         */
        neighbouringSiteAccessDetails: string | null;
        /**
         * Provided information on site health and safety on this address
         */
        neighbouringSiteSafetyDetails: string | null;
        [k: string]: unknown;
      }[]
    | null;
  /**
   * A list of related case references known to the appellant and the LPA
   */
  nearbyCaseReferences: string[] | null;
  typeOfPlanningApplication?:
    | 'full-appeal'
    | 'householder-planning'
    | 'outline-planning'
    | 'prior-approval'
    | 'reserved-matters'
    | 'removal-or-variation-of-conditions'
    | null;
  [k: string]: unknown;
}

/**
 * Schema defining the data produced by the Front-Office when a representation is created on an appeal
 */
export type AppealRepresentationSubmission = {
  /**
   * External case identifier
   */
  caseReference: string;
  /**
   * The date the representation was submitted
   */
  representationSubmittedDate: string | null;
  /**
   * The type of representation
   */
  representationType: 'statement' | 'comment' | 'final_comment' | 'proofs_evidence' | null;
  /**
   * The original representation
   */
  representation: string | null;
  documents: {
    /**
     * The unique identifier for the document
     */
    documentId: string;
    /**
     * Current stored name of the document
     */
    filename: string;
    /**
     * Original name of document
     */
    originalFilename: string;
    /**
     * The file size, in bytes
     */
    size: number;
    /**
     * The mime type for the current version of the file
     */
    mime: string;
    /**
     * The internal location of the document
     */
    documentURI: string;
    /**
     * The creation date for the document
     */
    dateCreated: string;
    /**
     * The type of document, used for exchange, migrations and consumption from the appeal back-office system
     */
    documentType:
      | 'interestedPartyComment'
      | 'lpaStatement'
      | 'rule6Statement'
      | 'appellantFinalComment'
      | 'lpaFinalComment'
      | 'appellantProofOfEvidence'
      | 'appellantWitnessesEvidence'
      | 'lpaProofOfEvidence'
      | 'lpaWitnessesEvidence'
      | 'rule6ProofOfEvidence'
      | 'rule6WitnessesEvidence'
      | null;
    [k: string]: unknown;
  }[];
  /**
   * Service User Id of the person or organisation making the representation
   */
  serviceUserId?: string | null;
  /**
   * A unique identifier for the Local Planning Authority
   */
  lpaCode?: string | null;
  newUser?: {
    /**
     * A formal greeting, e.g., Mr, Mrs, Ms.
     */
    salutation: string | null;
    /**
     * The first name of the individual.
     */
    firstName: string | null;
    /**
     * The last name of the individual.
     */
    lastName: string | null;
    /**
     * The primary email address for contact.
     */
    emailAddress: string | null;
    /**
     * The primary telephone contact number.
     */
    telephoneNumber: string | null;
    /**
     * The name of the organisation associated with the individual.
     */
    organisation: string | null;
    /**
     * Type or category of the service user.
     */
    serviceUserType: 'InterestedParty';
    [k: string]: unknown;
  };
  [k: string]: unknown;
} & {
  [k: string]: unknown;
};

/**
 * Schema defining any S78 specific properties for questionnaire submissions
 */
export type AppellantS78SubmissionProperties = AppellantHASSubmissionProperties & {
  /**
   * Indicates if the site is an agricultural holding
   */
  agriculturalHolding?: boolean | null;
  /**
   * Indicates if the site is a tenant agricultural holding
   */
  tenantAgriculturalHolding?: boolean | null;
  /**
   * Indicates if the site is an agricultural holding with other tenants
   */
  otherTenantsAgriculturalHolding?: boolean | null;
  /**
   * If the site is an agricultural holding, indicates tenants are informed
   */
  informedTenantsAgriculturalHolding?: boolean | null;
  /**
   * The procedure preference indicated by the appellant
   */
  appellantProcedurePreference?: 'written' | 'hearing' | 'inquiry' | null;
  /**
   * The procedure details preference indicated by the appellant
   */
  appellantProcedurePreferenceDetails?: string | null;
  /**
   * The duration of the procedure indicated by the appellant
   */
  appellantProcedurePreferenceDuration?: number | null;
  /**
   * The number of witnesses in inquiries
   */
  inquiryHowManyWitnesses?: number | null;
  /**
   * Indicates the existence of a planning obligation
   */
  planningObligation?: boolean | null;
  /**
   * The planning obligation information, if available
   */
  statusPlanningObligation?: string | null;
  developmentType?:
    | 'householder'
    | 'change-of-use'
    | 'major-dwellings'
    | 'major-industry-storage'
    | 'major-offices'
    | 'major-retail-services'
    | 'major-traveller-caravan'
    | 'mineral-workings'
    | 'minor-dwellings'
    | 'minor-industry-storage'
    | 'minor-offices'
    | 'minor-retail-services'
    | 'minor-traveller-caravan'
    | 'other-major'
    | 'other-minor'
    | null;
};
/**
 * Schema defining any HAS specific properties for submissions
 */
export type AppellantHASSubmissionProperties = AppellantCommonSubmissionProperties & {
  /**
   * Indicates if the site is in a green belt
   */
  isGreenBelt?: boolean | null;
  /**
   * The site area, in square meters
   */
  siteAreaSquareMetres?: number | null;
  /**
   * The floor space, in square meters
   */
  floorSpaceSquareMetres?: number | null;
  /**
   * Indicates if the appellant has complete ownership of the site
   */
  ownsAllLand?: boolean | null;
  /**
   * Indicates if the appellant has partial ownership of the site
   */
  ownsSomeLand?: boolean | null;
  /**
   * Indicates if the appellant knows other owners of the site
   */
  knowsOtherOwners?: 'Yes' | 'No' | 'Some' | null;
  /**
   * Indicates if the appellant knows all owners of the site
   */
  knowsAllOwners?: 'Yes' | 'No' | 'Some' | null;
  /**
   * Indicates if the appellant has advertised the appeal to the LPA decision
   */
  advertisedAppeal?: boolean | null;
  /**
   * Indicates if the appellant has informed other owners of the site
   */
  ownersInformed?: boolean | null;
  /**
   * The original description of the development, as provided by the appellant
   */
  originalDevelopmentDescription?: string | null;
  /**
   * Indicates that the LPA has changed the development description
   */
  changedDevelopmentDescription?: boolean | null;
  /**
   * Indicates if the appellant has applied for costs
   */
  appellantCostsAppliedFor?: boolean | null;
};

/**
 * Schema defining any properties common across all appeal types for appeal submissions
 */
export interface AppellantCommonSubmissionProperties {
  /**
   * Case submission id - link to draft submission created by appellant
   */
  submissionId: string;
  /**
   * The type of procedure for the appeal
   */
  caseProcedure: 'written' | 'hearing' | 'inquiry';
  /**
   * A unique identifier for the Local Planning Authority
   */
  lpaCode: string;
  /**
   * The date the appeal was submitted by the appellant
   */
  caseSubmittedDate: string;
  /**
   * Indicates if an enforcement notice is the reason for the appeal
   */
  enforcementNotice: boolean | null;
  /**
   * The unique identifier of the LPA application
   */
  applicationReference: string;
  /**
   * The date of the original LPA application
   */
  applicationDate: string;
  /**
   * The outcome of the original LPA decision
   */
  applicationDecision: 'granted' | 'refused' | 'not_received';
  /**
   * The date of the original LPA decision
   */
  applicationDecisionDate: string | null;
  /**
   * The statutory deadline for submitting an appeal from the original LPA decision date
   */
  caseSubmissionDueDate: string | null;
  /**
   * First line of address for the appeal site
   */
  siteAddressLine1: string;
  /**
   * Second line of address for the appeal site
   */
  siteAddressLine2: string | null;
  /**
   * Town / City of the site address
   */
  siteAddressTown: string;
  /**
   * County of the site address
   */
  siteAddressCounty: string | null;
  /**
   * Postal code of the site address
   */
  siteAddressPostcode: string;
  /**
   * Provided information on site accessibility
   */
  siteAccessDetails: string[] | null;
  /**
   * Provided information on site health and safety
   */
  siteSafetyDetails: string[] | null;
  /**
   * A list of neighbouring site addresses
   */
  neighbouringSiteAddresses:
    | {
        /**
         * First line of address of the site
         */
        neighbouringSiteAddressLine1: string;
        /**
         * Second line of address of the site
         */
        neighbouringSiteAddressLine2: string | null;
        /**
         * Town / City of the site address
         */
        neighbouringSiteAddressTown: string;
        /**
         * County of the site address
         */
        neighbouringSiteAddressCounty: string | null;
        /**
         * Postal code of the site address
         */
        neighbouringSiteAddressPostcode: string;
        /**
         * Provided information on site accessibility on this address
         */
        neighbouringSiteAccessDetails: string | null;
        /**
         * Provided information on site health and safety on this address
         */
        neighbouringSiteSafetyDetails: string | null;
        [k: string]: unknown;
      }[]
    | null;
  /**
   * A list of related case references known to the appellant and the LPA
   */
  nearbyCaseReferences: string[] | null;
  typeOfPlanningApplication?:
    | 'full-appeal'
    | 'householder-planning'
    | 'outline-planning'
    | 'prior-approval'
    | 'reserved-matters'
    | 'removal-or-variation-of-conditions'
    | null;
  [k: string]: unknown;
}

/**
 * Schema defining any HAS specific properties for submissions
 */
export type AppellantHASSubmissionProperties = AppellantCommonSubmissionProperties & {
  /**
   * Indicates if the site is in a green belt
   */
  isGreenBelt?: boolean | null;
  /**
   * The site area, in square meters
   */
  siteAreaSquareMetres?: number | null;
  /**
   * The floor space, in square meters
   */
  floorSpaceSquareMetres?: number | null;
  /**
   * Indicates if the appellant has complete ownership of the site
   */
  ownsAllLand?: boolean | null;
  /**
   * Indicates if the appellant has partial ownership of the site
   */
  ownsSomeLand?: boolean | null;
  /**
   * Indicates if the appellant knows other owners of the site
   */
  knowsOtherOwners?: 'Yes' | 'No' | 'Some' | null;
  /**
   * Indicates if the appellant knows all owners of the site
   */
  knowsAllOwners?: 'Yes' | 'No' | 'Some' | null;
  /**
   * Indicates if the appellant has advertised the appeal to the LPA decision
   */
  advertisedAppeal?: boolean | null;
  /**
   * Indicates if the appellant has informed other owners of the site
   */
  ownersInformed?: boolean | null;
  /**
   * The original description of the development, as provided by the appellant
   */
  originalDevelopmentDescription?: string | null;
  /**
   * Indicates that the LPA has changed the development description
   */
  changedDevelopmentDescription?: boolean | null;
  /**
   * Indicates if the appellant has applied for costs
   */
  appellantCostsAppliedFor?: boolean | null;
};
/**
 * Schema defining any S78 specific properties for questionnaire submissions
 */
export type AppellantS78SubmissionProperties = AppellantHASSubmissionProperties & {
  /**
   * Indicates if the site is an agricultural holding
   */
  agriculturalHolding?: boolean | null;
  /**
   * Indicates if the site is a tenant agricultural holding
   */
  tenantAgriculturalHolding?: boolean | null;
  /**
   * Indicates if the site is an agricultural holding with other tenants
   */
  otherTenantsAgriculturalHolding?: boolean | null;
  /**
   * If the site is an agricultural holding, indicates tenants are informed
   */
  informedTenantsAgriculturalHolding?: boolean | null;
  /**
   * The procedure preference indicated by the appellant
   */
  appellantProcedurePreference?: 'written' | 'hearing' | 'inquiry' | null;
  /**
   * The procedure details preference indicated by the appellant
   */
  appellantProcedurePreferenceDetails?: string | null;
  /**
   * The duration of the procedure indicated by the appellant
   */
  appellantProcedurePreferenceDuration?: number | null;
  /**
   * The number of witnesses in inquiries
   */
  inquiryHowManyWitnesses?: number | null;
  /**
   * Indicates the existence of a planning obligation
   */
  planningObligation?: boolean | null;
  /**
   * The planning obligation information, if available
   */
  statusPlanningObligation?: string | null;
  developmentType?:
    | 'householder'
    | 'change-of-use'
    | 'major-dwellings'
    | 'major-industry-storage'
    | 'major-offices'
    | 'major-retail-services'
    | 'major-traveller-caravan'
    | 'mineral-workings'
    | 'minor-dwellings'
    | 'minor-industry-storage'
    | 'minor-offices'
    | 'minor-retail-services'
    | 'minor-traveller-caravan'
    | 'other-major'
    | 'other-minor'
    | null;
};

/**
 * Schema defining the data produced by the Front-Office when an appeal is requested
 */
export interface AppellantSubmissionCommand {
  casedata:
    | ({
        caseType?: 'D';
      } & AppellantHASSubmissionProperties)
    | ({
        caseType?: 'W';
      } & AppellantS78SubmissionProperties);
  documents: {
    /**
     * The unique identifier for the document
     */
    documentId: string;
    /**
     * Current stored name of the document
     */
    filename: string;
    /**
     * Original name of document
     */
    originalFilename: string;
    /**
     * The file size, in bytes
     */
    size: number;
    /**
     * The mime type for the current version of the file
     */
    mime: string;
    /**
     * The internal location of the document
     */
    documentURI: string;
    /**
     * The creation date for the document
     */
    dateCreated: string;
    /**
     * The type of document, used for exchange, migrations and consumption from the appeal back-office system
     */
    documentType:
      | 'appellantCaseCorrespondence'
      | 'appellantCaseWithdrawalLetter'
      | 'appellantCostsApplication'
      | 'appellantCostsCorrespondence'
      | 'appellantCostsWithdrawal'
      | 'appellantStatement'
      | 'applicationDecisionLetter'
      | 'changedDescription'
      | 'originalApplicationForm'
      | 'planningObligation'
      | 'ownershipCertificate'
      | 'statementCommonGround'
      | 'designAccessStatement'
      | 'plansDrawings'
      | 'newPlansDrawings'
      | 'otherNewDocuments'
      | null;
    [k: string]: unknown;
  }[];
  /**
   * @minItems 1
   */
  users: [
    {
      /**
       * A formal greeting, e.g., Mr, Mrs, Ms.
       */
      salutation: string | null;
      /**
       * The first name of the individual.
       */
      firstName: string | null;
      /**
       * The last name of the individual.
       */
      lastName: string | null;
      /**
       * The primary email address for contact.
       */
      emailAddress: string | null;
      /**
       * The primary telephone contact number.
       */
      telephoneNumber: string | null;
      /**
       * The name of the organisation associated with the individual.
       */
      organisation: string | null;
      /**
       * Type or category of the service user.
       */
      serviceUserType: 'Appellant' | 'Agent';
      [k: string]: unknown;
    },
    ...{
      /**
       * A formal greeting, e.g., Mr, Mrs, Ms.
       */
      salutation: string | null;
      /**
       * The first name of the individual.
       */
      firstName: string | null;
      /**
       * The last name of the individual.
       */
      lastName: string | null;
      /**
       * The primary email address for contact.
       */
      emailAddress: string | null;
      /**
       * The primary telephone contact number.
       */
      telephoneNumber: string | null;
      /**
       * The name of the organisation associated with the individual.
       */
      organisation: string | null;
      /**
       * Type or category of the service user.
       */
      serviceUserType: 'Appellant' | 'Agent';
      [k: string]: unknown;
    }[]
  ];
  [k: string]: unknown;
}
/**
 * Schema defining any properties common across all appeal types for appeal submissions
 */
export interface AppellantCommonSubmissionProperties {
  /**
   * Case submission id - link to draft submission created by appellant
   */
  submissionId: string;
  /**
   * The type of procedure for the appeal
   */
  caseProcedure: 'written' | 'hearing' | 'inquiry';
  /**
   * A unique identifier for the Local Planning Authority
   */
  lpaCode: string;
  /**
   * The date the appeal was submitted by the appellant
   */
  caseSubmittedDate: string;
  /**
   * Indicates if an enforcement notice is the reason for the appeal
   */
  enforcementNotice: boolean | null;
  /**
   * The unique identifier of the LPA application
   */
  applicationReference: string;
  /**
   * The date of the original LPA application
   */
  applicationDate: string;
  /**
   * The outcome of the original LPA decision
   */
  applicationDecision: 'granted' | 'refused' | 'not_received';
  /**
   * The date of the original LPA decision
   */
  applicationDecisionDate: string | null;
  /**
   * The statutory deadline for submitting an appeal from the original LPA decision date
   */
  caseSubmissionDueDate: string | null;
  /**
   * First line of address for the appeal site
   */
  siteAddressLine1: string;
  /**
   * Second line of address for the appeal site
   */
  siteAddressLine2: string | null;
  /**
   * Town / City of the site address
   */
  siteAddressTown: string;
  /**
   * County of the site address
   */
  siteAddressCounty: string | null;
  /**
   * Postal code of the site address
   */
  siteAddressPostcode: string;
  /**
   * Provided information on site accessibility
   */
  siteAccessDetails: string[] | null;
  /**
   * Provided information on site health and safety
   */
  siteSafetyDetails: string[] | null;
  /**
   * A list of neighbouring site addresses
   */
  neighbouringSiteAddresses:
    | {
        /**
         * First line of address of the site
         */
        neighbouringSiteAddressLine1: string;
        /**
         * Second line of address of the site
         */
        neighbouringSiteAddressLine2: string | null;
        /**
         * Town / City of the site address
         */
        neighbouringSiteAddressTown: string;
        /**
         * County of the site address
         */
        neighbouringSiteAddressCounty: string | null;
        /**
         * Postal code of the site address
         */
        neighbouringSiteAddressPostcode: string;
        /**
         * Provided information on site accessibility on this address
         */
        neighbouringSiteAccessDetails: string | null;
        /**
         * Provided information on site health and safety on this address
         */
        neighbouringSiteSafetyDetails: string | null;
        [k: string]: unknown;
      }[]
    | null;
  /**
   * A list of related case references known to the appellant and the LPA
   */
  nearbyCaseReferences: string[] | null;
  typeOfPlanningApplication?:
    | 'full-appeal'
    | 'householder-planning'
    | 'outline-planning'
    | 'prior-approval'
    | 'reserved-matters'
    | 'removal-or-variation-of-conditions'
    | null;
  [k: string]: unknown;
}

export type Name = string;

/**
 * Subset of Pins Data Model [Service User]
 */
export interface InterestedParty {
  id?: number;
  interestedPartyNumber?: string;
  firstName?: string;
  lastName?: string;
  under18?: boolean;
  organisationName?: Name;
  jobTitle?: string;
  contactMethod?: 'email' | 'post';
  email?: string;
  phoneNumber?: string;
  address?: Address;
  [k: string]: unknown;
}
export interface Address {
  addressLine1: string;
  addressLine2?: string;
  town: string;
  postcode: string;
  country?: string;
}

/**
 * Schema defining any properties common across all appeal types for LPAQ submissions
 */
export interface LPAQCommonSubmissionProperties {
  /**
   * External case identifier
   */
  caseReference: string;
  /**
   * The date the LPA provided a response to the case
   */
  lpaQuestionnaireSubmittedDate: string | null;
  /**
   * Provided information on site accessibility
   */
  siteAccessDetails: string[] | null;
  /**
   * Provided information on site health and safety
   */
  siteSafetyDetails: string[] | null;
  /**
   * A list of related case references known to the appellant and the LPA
   */
  nearbyCaseReferences: string[] | null;
  /**
   * A list of neighbouring site addresses
   */
  neighbouringSiteAddresses:
    | {
        /**
         * First line of address of the site
         */
        neighbouringSiteAddressLine1: string;
        /**
         * Second line of address of the site
         */
        neighbouringSiteAddressLine2: string | null;
        /**
         * Town / City of the site address
         */
        neighbouringSiteAddressTown: string;
        /**
         * County of the site address
         */
        neighbouringSiteAddressCounty: string | null;
        /**
         * Postal code of the site address
         */
        neighbouringSiteAddressPostcode: string;
        /**
         * Provided information on site accessibility on this address
         */
        neighbouringSiteAccessDetails: string | null;
        /**
         * Provided information on site health and safety on this address
         */
        neighbouringSiteSafetyDetails: string | null;
        [k: string]: unknown;
      }[]
    | null;
  /**
   * A general reason given for the need to visit any neighbours
   */
  reasonForNeighbourVisits?: string | null;
  [k: string]: unknown;
}

/**
 * Schema defining any HAS specific properties for LPAQ submissions
 */
export type LPAQHASSubmissionProperties = LPAQCommonSubmissionProperties & {
  /**
   * Indicates if the LPA considers the appeal type appropriate
   */
  isCorrectAppealType?: boolean | null;
  /**
   * A list of affected listed building IDs from Historic England
   */
  affectedListedBuildingNumbers?: string[] | null;
  /**
   * Indicates if the site is in a green belt
   */
  isGreenBelt?: boolean | null;
  /**
   * Indicates if the site is in a conservation area
   */
  inConservationArea?: boolean | null;
  /**
   * New conditions details provided by the LPA
   */
  newConditionDetails?: string | null;
  /**
   * The methods used to notify relevant parties
   */
  notificationMethod?: string[] | null;
  /**
   * Indicates if the LPA has applied for costs
   */
  lpaCostsAppliedFor?: boolean | null;
  /**
   * A statement provided by the LPA, unused?
   */
  lpaStatement?: string | null;
};

/**
 * Schema defining any properties common across all appeal types for LPAQ submissions
 */
export interface LPAQCommonSubmissionProperties {
  /**
   * External case identifier
   */
  caseReference: string;
  /**
   * The date the LPA provided a response to the case
   */
  lpaQuestionnaireSubmittedDate: string | null;
  /**
   * Provided information on site accessibility
   */
  siteAccessDetails: string[] | null;
  /**
   * Provided information on site health and safety
   */
  siteSafetyDetails: string[] | null;
  /**
   * A list of related case references known to the appellant and the LPA
   */
  nearbyCaseReferences: string[] | null;
  /**
   * A list of neighbouring site addresses
   */
  neighbouringSiteAddresses:
    | {
        /**
         * First line of address of the site
         */
        neighbouringSiteAddressLine1: string;
        /**
         * Second line of address of the site
         */
        neighbouringSiteAddressLine2: string | null;
        /**
         * Town / City of the site address
         */
        neighbouringSiteAddressTown: string;
        /**
         * County of the site address
         */
        neighbouringSiteAddressCounty: string | null;
        /**
         * Postal code of the site address
         */
        neighbouringSiteAddressPostcode: string;
        /**
         * Provided information on site accessibility on this address
         */
        neighbouringSiteAccessDetails: string | null;
        /**
         * Provided information on site health and safety on this address
         */
        neighbouringSiteSafetyDetails: string | null;
        [k: string]: unknown;
      }[]
    | null;
  /**
   * A general reason given for the need to visit any neighbours
   */
  reasonForNeighbourVisits?: string | null;
  [k: string]: unknown;
}

/**
 * Schema defining any S78 specific properties for LPAQ submissions
 */
export type LPAQS78SubmissionProperties = LPAQHASSubmissionProperties & {
  /**
   * A list of changed listed building IDs from Historic England
   */
  changedListedBuildingNumbers?: string[] | null;
  /**
   * Indicates that a scheduled monument is affected
   */
  affectsScheduledMonument?: boolean | null;
  /**
   * Indicates the existence of protected species
   */
  hasProtectedSpecies?: boolean | null;
  /**
   * Indicates an area of outstanding beauty (National Landscape)
   */
  isAonbNationalLandscape?: boolean | null;
  /**
   * The designated site names
   */
  designatedSitesNames?: string[] | null;
  /**
   * Indicates a TPO (tree preservation order)
   */
  hasTreePreservationOrder?: boolean | null;
  /**
   * Indicates a traveller site
   */
  isGypsyOrTravellerSite?: boolean | null;
  /**
   * Indicates a PROW (public right of way)
   */
  isPublicRightOfWay?: boolean | null;
  /**
   * The impact schedule from EIA
   */
  eiaEnvironmentalImpactSchedule?: 'schedule-1' | 'schedule-2' | null;
  /**
   * The development description from EIA
   */
  eiaDevelopmentDescription?:
    | 'agriculture-aquaculture'
    | 'change-extensions'
    | 'chemical-industry'
    | 'energy-industry'
    | 'extractive-industry'
    | 'food-industry'
    | 'infrastructure-projects'
    | 'mineral-industry'
    | 'other-projects'
    | 'production-processing-of-metals'
    | 'rubber-industry'
    | 'textile-industries'
    | 'tourism-leisure'
    | null;
  /**
   * The sensitive area details from EIA
   */
  eiaSensitiveAreaDetails?: string | null;
  /**
   * EIA specific threshold
   */
  eiaColumnTwoThreshold?: boolean | null;
  /**
   * EIA screening opinion
   */
  eiaScreeningOpinion?: boolean | null;
  /**
   * EIA environmental statement required
   */
  eiaRequiresEnvironmentalStatement?: boolean | null;
  /**
   * EIA completed environmental statement required
   */
  eiaCompletedEnvironmentalStatement?: boolean | null;
  /**
   * Indicates statutory consultees
   */
  hasStatutoryConsultees?: boolean | null;
  /**
   * The details of the bodies consulted
   */
  consultedBodiesDetails?: string | null;
  /**
   * Indicates consultation responses
   */
  hasConsultationResponses?: boolean | null;
  /**
   * Indicates emerging plans
   */
  hasEmergingPlan?: boolean | null;
  /**
   * Indicates supplementary planning documents
   */
  hasSupplementaryPlanningDocs?: boolean | null;
  /**
   * Indicates the existence of an infrastructure levy
   */
  hasInfrastructureLevy?: boolean | null;
  /**
   * Indicates if the infrastructure levy is formally adopted
   */
  isInfrastructureLevyFormallyAdopted?: boolean | null;
  /**
   * The date of the infrastructure levy adoption
   */
  infrastructureLevyAdoptedDate?: string | null;
  /**
   * The expected date of the infrastructure levy
   */
  infrastructureLevyExpectedDate?: string | null;
  /**
   * The procedure preference indicated by the LPA
   */
  lpaProcedurePreference?: 'written' | 'hearing' | 'inquiry' | null;
  /**
   * The procedure details preference indicated by the LPA
   */
  lpaProcedurePreferenceDetails?: string | null;
  /**
   * The duration of enquiry indicated by the LPA
   */
  lpaProcedurePreferenceDuration?: number | null;
};
/**
 * Schema defining any HAS specific properties for LPAQ submissions
 */
export type LPAQHASSubmissionProperties = LPAQCommonSubmissionProperties & {
  /**
   * Indicates if the LPA considers the appeal type appropriate
   */
  isCorrectAppealType?: boolean | null;
  /**
   * A list of affected listed building IDs from Historic England
   */
  affectedListedBuildingNumbers?: string[] | null;
  /**
   * Indicates if the site is in a green belt
   */
  isGreenBelt?: boolean | null;
  /**
   * Indicates if the site is in a conservation area
   */
  inConservationArea?: boolean | null;
  /**
   * New conditions details provided by the LPA
   */
  newConditionDetails?: string | null;
  /**
   * The methods used to notify relevant parties
   */
  notificationMethod?: string[] | null;
  /**
   * Indicates if the LPA has applied for costs
   */
  lpaCostsAppliedFor?: boolean | null;
  /**
   * A statement provided by the LPA, unused?
   */
  lpaStatement?: string | null;
};

/**
 * Schema defining any properties common across all appeal types for LPAQ submissions
 */
export interface LPAQCommonSubmissionProperties {
  /**
   * External case identifier
   */
  caseReference: string;
  /**
   * The date the LPA provided a response to the case
   */
  lpaQuestionnaireSubmittedDate: string | null;
  /**
   * Provided information on site accessibility
   */
  siteAccessDetails: string[] | null;
  /**
   * Provided information on site health and safety
   */
  siteSafetyDetails: string[] | null;
  /**
   * A list of related case references known to the appellant and the LPA
   */
  nearbyCaseReferences: string[] | null;
  /**
   * A list of neighbouring site addresses
   */
  neighbouringSiteAddresses:
    | {
        /**
         * First line of address of the site
         */
        neighbouringSiteAddressLine1: string;
        /**
         * Second line of address of the site
         */
        neighbouringSiteAddressLine2: string | null;
        /**
         * Town / City of the site address
         */
        neighbouringSiteAddressTown: string;
        /**
         * County of the site address
         */
        neighbouringSiteAddressCounty: string | null;
        /**
         * Postal code of the site address
         */
        neighbouringSiteAddressPostcode: string;
        /**
         * Provided information on site accessibility on this address
         */
        neighbouringSiteAccessDetails: string | null;
        /**
         * Provided information on site health and safety on this address
         */
        neighbouringSiteSafetyDetails: string | null;
        [k: string]: unknown;
      }[]
    | null;
  /**
   * A general reason given for the need to visit any neighbours
   */
  reasonForNeighbourVisits?: string | null;
  [k: string]: unknown;
}

/**
 * Schema defining any HAS specific properties for LPAQ submissions
 */
export type LPAQHASSubmissionProperties = LPAQCommonSubmissionProperties & {
  /**
   * Indicates if the LPA considers the appeal type appropriate
   */
  isCorrectAppealType?: boolean | null;
  /**
   * A list of affected listed building IDs from Historic England
   */
  affectedListedBuildingNumbers?: string[] | null;
  /**
   * Indicates if the site is in a green belt
   */
  isGreenBelt?: boolean | null;
  /**
   * Indicates if the site is in a conservation area
   */
  inConservationArea?: boolean | null;
  /**
   * New conditions details provided by the LPA
   */
  newConditionDetails?: string | null;
  /**
   * The methods used to notify relevant parties
   */
  notificationMethod?: string[] | null;
  /**
   * Indicates if the LPA has applied for costs
   */
  lpaCostsAppliedFor?: boolean | null;
  /**
   * A statement provided by the LPA, unused?
   */
  lpaStatement?: string | null;
};
/**
 * Schema defining any S78 specific properties for LPAQ submissions
 */
export type LPAQS78SubmissionProperties = LPAQHASSubmissionProperties & {
  /**
   * A list of changed listed building IDs from Historic England
   */
  changedListedBuildingNumbers?: string[] | null;
  /**
   * Indicates that a scheduled monument is affected
   */
  affectsScheduledMonument?: boolean | null;
  /**
   * Indicates the existence of protected species
   */
  hasProtectedSpecies?: boolean | null;
  /**
   * Indicates an area of outstanding beauty (National Landscape)
   */
  isAonbNationalLandscape?: boolean | null;
  /**
   * The designated site names
   */
  designatedSitesNames?: string[] | null;
  /**
   * Indicates a TPO (tree preservation order)
   */
  hasTreePreservationOrder?: boolean | null;
  /**
   * Indicates a traveller site
   */
  isGypsyOrTravellerSite?: boolean | null;
  /**
   * Indicates a PROW (public right of way)
   */
  isPublicRightOfWay?: boolean | null;
  /**
   * The impact schedule from EIA
   */
  eiaEnvironmentalImpactSchedule?: 'schedule-1' | 'schedule-2' | null;
  /**
   * The development description from EIA
   */
  eiaDevelopmentDescription?:
    | 'agriculture-aquaculture'
    | 'change-extensions'
    | 'chemical-industry'
    | 'energy-industry'
    | 'extractive-industry'
    | 'food-industry'
    | 'infrastructure-projects'
    | 'mineral-industry'
    | 'other-projects'
    | 'production-processing-of-metals'
    | 'rubber-industry'
    | 'textile-industries'
    | 'tourism-leisure'
    | null;
  /**
   * The sensitive area details from EIA
   */
  eiaSensitiveAreaDetails?: string | null;
  /**
   * EIA specific threshold
   */
  eiaColumnTwoThreshold?: boolean | null;
  /**
   * EIA screening opinion
   */
  eiaScreeningOpinion?: boolean | null;
  /**
   * EIA environmental statement required
   */
  eiaRequiresEnvironmentalStatement?: boolean | null;
  /**
   * EIA completed environmental statement required
   */
  eiaCompletedEnvironmentalStatement?: boolean | null;
  /**
   * Indicates statutory consultees
   */
  hasStatutoryConsultees?: boolean | null;
  /**
   * The details of the bodies consulted
   */
  consultedBodiesDetails?: string | null;
  /**
   * Indicates consultation responses
   */
  hasConsultationResponses?: boolean | null;
  /**
   * Indicates emerging plans
   */
  hasEmergingPlan?: boolean | null;
  /**
   * Indicates supplementary planning documents
   */
  hasSupplementaryPlanningDocs?: boolean | null;
  /**
   * Indicates the existence of an infrastructure levy
   */
  hasInfrastructureLevy?: boolean | null;
  /**
   * Indicates if the infrastructure levy is formally adopted
   */
  isInfrastructureLevyFormallyAdopted?: boolean | null;
  /**
   * The date of the infrastructure levy adoption
   */
  infrastructureLevyAdoptedDate?: string | null;
  /**
   * The expected date of the infrastructure levy
   */
  infrastructureLevyExpectedDate?: string | null;
  /**
   * The procedure preference indicated by the LPA
   */
  lpaProcedurePreference?: 'written' | 'hearing' | 'inquiry' | null;
  /**
   * The procedure details preference indicated by the LPA
   */
  lpaProcedurePreferenceDetails?: string | null;
  /**
   * The duration of enquiry indicated by the LPA
   */
  lpaProcedurePreferenceDuration?: number | null;
};

/**
 * Schema defining the data produced by the Front-Office when an LPA Questionnaire is submitted
 */
export interface LPAQuestionnaireCommand {
  casedata:
    | ({
        [k: string]: unknown;
      } & LPAQHASSubmissionProperties)
    | ({
        caseType?: 'W';
      } & LPAQS78SubmissionProperties)
    | ({
        caseType?: 'D';
      } & LPAQHASSubmissionProperties);
  documents: {
    /**
     * The unique identifier for the document
     */
    documentId: string;
    /**
     * Current stored name of the document
     */
    filename: string;
    /**
     * Original name of document
     */
    originalFilename: string;
    /**
     * The file size, in bytes
     */
    size: number;
    /**
     * The mime type for the current version of the file
     */
    mime: string;
    /**
     * The internal location of the document
     */
    documentURI: string;
    /**
     * The creation date for the document
     */
    dateCreated: string;
    /**
     * The type of document, used for exchange, migrations and consumption from the appeal back-office system
     */
    documentType:
      | 'whoNotified'
      | 'whoNotifiedSiteNotice'
      | 'whoNotifiedLetterToNeighbours'
      | 'whoNotifiedPressAdvert'
      | 'conservationMap'
      | 'lpaCaseCorrespondence'
      | 'lpaCostsApplication'
      | 'lpaCostsCorrespondence'
      | 'lpaCostsWithdrawal'
      | 'otherPartyRepresentations'
      | 'planningOfficerReport'
      | 'plansDrawings'
      | 'developmentPlanPolicies'
      | 'supplementaryPlanning'
      | 'emergingPlan'
      | 'appealNotification'
      | null;
    [k: string]: unknown;
  }[];
  [k: string]: unknown;
}
/**
 * Schema defining any properties common across all appeal types for LPAQ submissions
 */
export interface LPAQCommonSubmissionProperties {
  /**
   * External case identifier
   */
  caseReference: string;
  /**
   * The date the LPA provided a response to the case
   */
  lpaQuestionnaireSubmittedDate: string | null;
  /**
   * Provided information on site accessibility
   */
  siteAccessDetails: string[] | null;
  /**
   * Provided information on site health and safety
   */
  siteSafetyDetails: string[] | null;
  /**
   * A list of related case references known to the appellant and the LPA
   */
  nearbyCaseReferences: string[] | null;
  /**
   * A list of neighbouring site addresses
   */
  neighbouringSiteAddresses:
    | {
        /**
         * First line of address of the site
         */
        neighbouringSiteAddressLine1: string;
        /**
         * Second line of address of the site
         */
        neighbouringSiteAddressLine2: string | null;
        /**
         * Town / City of the site address
         */
        neighbouringSiteAddressTown: string;
        /**
         * County of the site address
         */
        neighbouringSiteAddressCounty: string | null;
        /**
         * Postal code of the site address
         */
        neighbouringSiteAddressPostcode: string;
        /**
         * Provided information on site accessibility on this address
         */
        neighbouringSiteAccessDetails: string | null;
        /**
         * Provided information on site health and safety on this address
         */
        neighbouringSiteSafetyDetails: string | null;
        [k: string]: unknown;
      }[]
    | null;
  /**
   * A general reason given for the need to visit any neighbours
   */
  reasonForNeighbourVisits?: string | null;
  [k: string]: unknown;
}

/**
 * A command to deliver metadata about a new document submission added to a deadline
 */
export interface NewDeadlineSubmission {
  /**
   * The unique reference of the case
   */
  caseReference: string;
  /**
   * The name of the FO user who made the submission
   */
  name: string;
  /**
   * The email address of the FO user who made the submission
   */
  email: string;
  /**
   * Was the submission made by an interested party on behalf of someone else?
   */
  interestedParty?: boolean;
  /**
   * Only necessary if `interestedParty` is true
   */
  interestedPartyReference?: string;
  /**
   * The name of the deadline which the submission was made against
   */
  deadline: string;
  /**
   * The name of the deadline line item the submission was made against
   */
  submissionType: string;
  /**
   * Does the submission contain sensitive data?
   */
  sensitiveData?: boolean;
  lateSubmission?: boolean;
  /**
   * ID of the submission in the database
   */
  submissionId?: string;
  /**
   * The GUID of the blob in storage
   */
  blobGuid: string;
  /**
   * The file name of the document in blob storage
   */
  documentName: string;
  [k: string]: unknown;
}

/**
 * Result of processing a new exam timetable submission
 */
export interface NsipExamTimetableSubmission {
  status: 'SUCCESS' | 'VIRUS_DETECTED' | 'FAILURE';
  deadline: string;
  submissionType: string;
  blobGuid: string;
  documentName: string;
  [k: string]: unknown;
}

/**
 * A command to register an NSIP subscription with the back office
 */
export interface RegisterNsipSubscription {
  /**
   * Properties in additionalProperties in the Service Bus message. Not present in the message body.
   */
  __additionalProperties__?: {
    type?: 'Create' | 'Delete';
  };
  nsipSubscription?: NsipSubscription;
  /**
   * Which update(s) does the subscriber want to get notified of. Note nsipSubscription.subscriptionType is ignored.
   */
  subscriptionTypes?: ('allUpdates' | 'applicationSubmitted' | 'applicationDecided' | 'registrationOpen')[];
  [k: string]: unknown;
}
/**
 * Subscribers are a subset of Service Users, part of the PINS Data Model
 */
export interface NsipSubscription {
  /**
   * The unique identifier within the Back Office. Ignored as part of register-nsip-subscription.
   */
  subscriptionId: number | null;
  /**
   * the case reference the subscription relates to
   */
  caseReference: string;
  emailAddress: string;
  /**
   * which update does the subscriber want to get notified of. For multiple types, use multiple messages.
   */
  subscriptionType: 'allUpdates' | 'applicationSubmitted' | 'applicationDecided' | 'registrationOpen';
  /**
   * The date to start getting updates
   */
  startDate: string | null;
  /**
   * The date to stop getting updates
   */
  endDate: string | null;
  language: 'English' | 'Welsh' | null;
  [k: string]: unknown;
}

export type Name = string;

export interface RegisterRepresentation {
  /**
   * registration identification number
   */
  referenceId: string;
  /**
   * The unique reference of the case
   */
  caseReference: string;
  /**
   * Type of representation
   */
  representationType?: string;
  originalRepresentation: string;
  representationFrom: 'PERSON' | 'ORGANISATION' | 'AGENT';
  registerFor: 'PERSON' | 'ORGANISATION' | 'FAMILY_GROUP';
  represented: InterestedParty;
  representative?: InterestedParty1;
  dateReceived?: string;
  [k: string]: unknown;
}
/**
 * Person or organisation being represented
 */
export interface InterestedParty {
  id?: number;
  interestedPartyNumber?: string;
  firstName?: string;
  lastName?: string;
  under18?: boolean;
  organisationName?: Name;
  jobTitle?: string;
  contactMethod?: 'email' | 'post';
  email?: string;
  phoneNumber?: string;
  address?: Address;
  [k: string]: unknown;
}
export interface Address {
  addressLine1: string;
  addressLine2?: string;
  town: string;
  postcode: string;
  country?: string;
}
/**
 * Person or organisation submitting representation in the case of Agent representationFrom
 */
export interface InterestedParty1 {
  id?: number;
  interestedPartyNumber?: string;
  firstName?: string;
  lastName?: string;
  under18?: boolean;
  organisationName?: Name;
  jobTitle?: string;
  contactMethod?: 'email' | 'post';
  email?: string;
  phoneNumber?: string;
  address?: Address;
  [k: string]: unknown;
}

