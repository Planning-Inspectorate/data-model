# generated by datamodel-codegen:
#   filename:  appeal-representation.schema.json
#   timestamp: 2025-05-07T09:47:12+00:00

from __future__ import annotations

from enum import Enum

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, RootModel


class RepresentationStatus(Enum):
    """
    Status of the representation
    """

    awaiting_review = "awaiting_review"
    referred = "referred"
    valid = "valid"
    invalid = "invalid"
    invalid_incomplete = "invalid_incomplete"
    published = "published"
    archived = "archived"
    draft = "draft"
    withdrawn = "withdrawn"
    NoneType_None = None


class InvalidOrIncompleteDetailEnumEnum(Enum):
    Received_after_deadline = "Received after deadline"
    Includes_personal_or_medical_information = (
        "Includes personal or medical information"
    )
    Includes_inflammatory_content = "Includes inflammatory content"
    Duplicated_or_repeated_comment = "Duplicated or repeated comment"
    Not_relevant_to_this_appeal = "Not relevant to this appeal"
    Contains_links_to_web_pages = "Contains links to web pages"
    No_list_of_suggested_conditions = "No list of suggested conditions"
    other_reason = "other_reason"


class InvalidOrIncompleteDetail(RootModel[InvalidOrIncompleteDetailEnumEnum | None]):
    root: InvalidOrIncompleteDetailEnumEnum | None = None


class Source(Enum):
    """
    Source of the representation (citizen or LPA)
    """

    lpa = "lpa"
    citizen = "citizen"
    NoneType_None = None


class RepresentationType(Enum):
    """
    The type of representation
    """

    statement = "statement"
    comment = "comment"
    final_comment = "final_comment"
    proofs_evidence = "proofs_evidence"
    NoneType_None = None


class AppealRepresentation(BaseModel):
    """
    Schema defining the metadata for appeal representations, such as statements, third-party comments and final comments
    """

    model_config = ConfigDict(
        extra="allow",
    )
    representationId: str = Field(..., examples=["7000000-1"])
    """
    The unique identifier for the representation
    """
    caseId: int | None = Field(..., examples=[1200])
    """
    Internal case identifier
    """
    caseReference: str = Field(..., examples=["7002471"])
    """
    External case identifier
    """
    representationStatus: RepresentationStatus
    """
    Status of the representation
    """
    originalRepresentation: str | None = None
    """
    The original representation
    """
    redacted: bool | None = None
    """
    Indicates if the representation is redacted
    """
    redactedRepresentation: str | None = None
    """
    The redacted version of the representation
    """
    redactedBy: str | None = None
    """
    Unique identifier for the case team member that performed the redaction
    """
    invalidOrIncompleteDetails: list[InvalidOrIncompleteDetail]
    """
    A list of reasons why the representation has been marked as invalid or incomplete.
    """
    otherInvalidOrIncompleteDetails: list[str]
    """
    A list of free text reasons why the representation has been marked as invalid or incomplete
    """
    source: Source
    """
    Source of the representation (citizen or LPA)
    """
    serviceUserId: str | None = None
    """
    Service User Id of the person or organisation making the representation
    """
    representationType: RepresentationType
    """
    The type of representation
    """
    dateReceived: AwareDatetime = Field(..., examples=["2023-07-27T20:30:00.000Z"])
    documentIds: list[str]
    """
    An array of documentIds
    """
